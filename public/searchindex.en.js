var relearn_searchindex = [
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Week 1 Objectives Learn the regulations Connect with other FCJ members Understand and practice basic AWS services Tasks to be carried out this week Day Task Start Date Completion Date Reference Material 1 - Get acquainted with FCJ members 09/09/2025 09/09/2025 - Read and take note of internship unit rules and regulations Rules and regulations - Learn and practice making a static website with Hugo Hugo quickstart, Learn Hugo Theme - Create AWS account. Practice creating Users group, Users (IAM user) Create AWS account; Create user, group user 2 - Learn and practice creating Budget (Template \u0026 Custom: Cost, Usage, Saving plans, Reservation) 10/09/2025 10/09/2025 Create budget - Update worklog Sample worklog 3 - Learn about support packages, types of support request, how to create a support 11/09/2025 11/09/2025 Support packages 4 - Translate a blog 12/09/2025 12/09/2025 Translated Blog 1 - Update worklog (UI, translated blog) 5 - Learn theory about VPC (Subnet, Route Table, Internet Gateway, NAT Gateway) 13/09/2025 13/09/2025 AWS Virtual Private Cloud - Update worklog 6 - Translate the 2nd Blog 14/09/2025 14/09/2025 Translated Blog 2 - Update worklog",
    "description": "Week 1 Objectives Learn the regulations Connect with other FCJ members Understand and practice basic AWS services Tasks to be carried out this week Day Task Start Date Completion Date Reference Material 1 - Get acquainted with FCJ members 09/09/2025 09/09/2025 - Read and take note of internship unit rules and regulations Rules and regulations - Learn and practice making a static website with Hugo Hugo quickstart, Learn Hugo Theme - Create AWS account. Practice creating Users group, Users (IAM user) Create AWS account; Create user, group user 2 - Learn and practice creating Budget (Template \u0026 Custom: Cost, Usage, Saving plans, Reservation) 10/09/2025 10/09/2025 Create budget - Update worklog Sample worklog 3 - Learn about support packages, types of support request, how to create a support 11/09/2025 11/09/2025 Support packages 4 - Translate a blog 12/09/2025 12/09/2025 Translated Blog 1 - Update worklog (UI, translated blog) 5 - Learn theory about VPC (Subnet, Route Table, Internet Gateway, NAT Gateway) 13/09/2025 13/09/2025 AWS Virtual Private Cloud - Update worklog 6 - Translate the 2nd Blog 14/09/2025 14/09/2025 Translated Blog 2 - Update worklog",
    "tags": [],
    "title": "Week 1 Worklog",
    "uri": "/en/1-worklog/1.1-week_1/index.html"
  },
  {
    "breadcrumb": "",
    "content": "INTERNSHIP REPORT Student Information: Full Name: Phan Canh Tuan Dat\nPhone Number: 0867829257\nEmail: pcanhtuandat@gmail.com\nUniversity: Sai Gon University\nMajor: Information Technology\nClass: DCT1226\nInternship Company: Amazon Web Services Vietnam Co., Ltd.\nInternship Position: FCJ Cloud Intern\nInternship Duration: From 12/08/2025 to 12/11/2025\nReport Content 1. Worklog\n2. Proposal\n3. Translated Blogs\n4. Events Participated\n5. Workshop\n6. Self-awareness\n7. Sharing and Feedback",
    "description": "INTERNSHIP REPORT Student Information: Full Name: Phan Canh Tuan Dat\nPhone Number: 0867829257\nEmail: pcanhtuandat@gmail.com\nUniversity: Sai Gon University\nMajor: Information Technology\nClass: DCT1226\nInternship Company: Amazon Web Services Vietnam Co., Ltd.\nInternship Position: FCJ Cloud Intern\nInternship Duration: From 12/08/2025 to 12/11/2025\nReport Content 1. Worklog\n2. Proposal\n3. Translated Blogs\n4. Events Participated\n5. Workshop\n6. Self-awareness\n7. Sharing and Feedback",
    "tags": [],
    "title": "Internship Report",
    "uri": "/en/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Translated Blogs",
    "content": "Hồ sơ quyết định kiến trúc (ADR): Thực tiễn tốt nhất để ra quyết định hiệu quả Tác giả: Christoph Kappey, Dominik Goby, và Darius Kunce – 20/03/2025\nChủ đề: Kiến trúc, Thực tiễn tốt nhất, Trình độ trung cấp (200), Quản lý \u0026 Điều hành, Hướng dẫn kỹ thuật\nHồ sơ quyết định kiến trúc (ADR) là công cụ giúp ghi lại và truyền đạt các quyết định quan trọng về quy trình và kiến trúc trong dự án kỹ thuật. Từ kinh nghiệm triển khai hơn 200 ADR ở nhiều dự án khác nhau, tác giả đã tổng hợp những cách làm hiệu quả giúp đơn giản hóa quy trình ra quyết định và nâng cao khả năng hợp tác trong nhóm.\nTrong bài viết này, ta sẽ bao quát về:\nCách áp dụng ADR trong tổ chức Các kinh nghiệm rút ra từ hơn 200 ADR thực tế Mẹo thực hành để rút gọn quá trình ra quyết định kiến trúc Ví dụ trong các dự án từ nhóm nhỏ 10 người đến nhóm lớn trên 100 người Những khó khăn thường gặp khi đưa ra quyết định kiến trúc 1. Thách thức thường gặp trước khi áp dụng ADR Đồng bộ nhóm – Các nhóm phát triển thường mất 20–30% thời gian để phối hợp với nhau, làm chậm tiến độ ra mắt tính năng và gia tăng chi phí do phải chỉnh sửa kiến trúc nhiều lần. Tính linh hoạt thiết kế – Khó tìm điểm cân bằng giữa thiết kế ban đầu và sự thay đổi liên tục trong môi trường Agile hoặc DevOps. Yêu cầu phi chức năng – Luôn có những đánh đổi giữa bảo mật, khả năng bảo trì và khả năng mở rộng. Thay đổi yêu cầu – Kiến trúc phải liên tục thích ứng với mục tiêu kinh doanh mới mà vẫn giữ được sự ổn định hệ thống. Chuyển giao kiến thức – Cần đảm bảo thành viên mới nhanh chóng hòa nhập và tuân thủ cách làm việc hiện tại của nhóm. 2. Làm thế nào để tối ưu hóa quy trình ra quyết định Từ kinh nghiệm của tác giả và các đồng nghiệp trong nhiều dự án – từ nhóm dưới 10 người đến dự án phức tạp có hơn 100 người chia thành nhiều luồng công việc – ADR đã đóng vai trò như kim chỉ nam xuyên suốt vòng đời dự án.\nSau hơn 3 năm áp dụng, tác giả đã đúc kết nhiều bài học thực tiễn. Việc ghi lại bối cảnh, các phương án đã cân nhắc, và lý do lựa chọn giúp nâng cao tính minh bạch, chia sẻ tri thức và trách nhiệm trong nhóm.\nMột số khuyến nghị quan trọng để xây dựng ADR hiệu quả:\nGiữ cho cuộc họp ADR ngắn gọn – Mỗi buổi chỉ nên kéo dài 30–45 phút để tập trung và hiệu quả. Áp dụng phong cách “readout” – Các thành viên dành 10–15 phút đọc tài liệu ADR, sau đó đóng góp ý kiến trực tiếp vào nội dung. Cách này tăng sự tham gia và tiết kiệm thời gian. Chọn thành phần tham dự gọn nhẹ nhưng đa dạng – Mời đại diện từ các nhóm liên quan, tổng số dưới 10 người để đảm bảo thảo luận hiệu quả. Chỉ tập trung vào một quyết định – Nếu có nhiều vấn đề, hãy tách thành các ADR riêng biệt. Tách biệt thiết kế và quyết định – Sử dụng tài liệu thiết kế riêng để phân tích phương án, rồi liên kết chúng trong ADR. Giải quyết triệt để phản hồi – Mọi ý kiến phải được phản hồi, chỉnh sửa hoặc trao đổi để đạt đồng thuận. Đưa ra quyết định kịp thời – Tránh họp quá nhiều lần. Thông thường chỉ cần 1–3 buổi readout là đủ. Khuyến khích sự hợp tác nhóm – Tác giả ADR phải chịu trách nhiệm, lấy ý kiến từ tất cả bên liên quan trước khi chốt. Duy trì và cập nhật liên tục – ADR phải được theo dõi, cập nhật khi có thay đổi, và liên kết với phiên bản mới nếu bị thay thế. Lưu trữ tập trung – Tất cả ADR nên được đặt ở nơi mọi người trong dự án đều truy cập được. 3. Mẹo triển khai và tiêu chí thành công Khi bắt đầu áp dụng, chúng ta nên:\nKhởi động với một nhóm thử nghiệm nhỏ Chuẩn hóa bằng các mẫu ADR rõ ràng Thiết lập chu kỳ rà soát định kỳ Đặt ra thước đo hiệu quả như: Thời gian đưa ra quyết định Mức độ hài lòng của nhóm Số lần phải sửa kiến trúc Hiệu quả phối hợp giữa các nhóm 4. Kết luận Áp dụng ADR theo những thực tiễn trên sẽ giúp quá trình ra quyết định trở nên gọn nhẹ, tăng tính hợp tác, và đảm bảo mọi quyết định đều được ghi nhận rõ ràng, minh bạch và phù hợp với mục tiêu chung.\nTham khảo thêm tại AWS Prescriptive Guidance để có phần giới thiệu và ví dụ ADR, hoặc truy cập ADR GitHub organization.\nLink bài viết gốc: (https://aws.amazon.com/blogs/architecture/master-architecture-decision-records-adrs-best-practices-for-effective-decision-making/)",
    "description": "Hồ sơ quyết định kiến trúc (ADR): Thực tiễn tốt nhất để ra quyết định hiệu quả Tác giả: Christoph Kappey, Dominik Goby, và Darius Kunce – 20/03/2025\nChủ đề: Kiến trúc, Thực tiễn tốt nhất, Trình độ trung cấp (200), Quản lý \u0026 Điều hành, Hướng dẫn kỹ thuật\nHồ sơ quyết định kiến trúc (ADR) là công cụ giúp ghi lại và truyền đạt các quyết định quan trọng về quy trình và kiến trúc trong dự án kỹ thuật. Từ kinh nghiệm triển khai hơn 200 ADR ở nhiều dự án khác nhau, tác giả đã tổng hợp những cách làm hiệu quả giúp đơn giản hóa quy trình ra quyết định và nâng cao khả năng hợp tác trong nhóm.",
    "tags": [],
    "title": "Blog 1",
    "uri": "/en/3-translated_blogs/blog_1/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Week 2 Objectives Learn and practice configure VPC and its related features Translate several blogs Update worklog structure Tasks to be carried out this week Day Task Start Date Completion Date Reference Material 1 - Learn about VPC and its feature 15/09/2025 15/09/2025 VPC, Youtube Lesson 2 - Practice creating VPC, Subnets, Internet Gateway 16/09/2025 16/09/2025 Create VPC, Create Subnets, Create Internet Gateway - Update worklog 3 - Practice creating Route table, Security groups 17/09/2025 17/09/2025 Create Route Table, Create Security Groups 4 - Learn about Deploying Amazon EC2 Instances 18/09/2025 18/09/2025 Deploying Amazon EC2 Instances, Youtube Tutorial - Practice creating EC2 server, Checking connection, creating NAT Gateway Create EC2 instance, Check connection, Create NAT Gateway - Translate a blog Translated Blog 3 5 - Practice using Reachability Analyzer 19/09/2025 19/09/2025 Create Reachability Analyzer - Team meeting to decide proposal project 6 - Translate a blog 20/09/2025 20/09/2025 Translated Blog 4 - Update worklog",
    "description": "Week 2 Objectives Learn and practice configure VPC and its related features Translate several blogs Update worklog structure Tasks to be carried out this week Day Task Start Date Completion Date Reference Material 1 - Learn about VPC and its feature 15/09/2025 15/09/2025 VPC, Youtube Lesson 2 - Practice creating VPC, Subnets, Internet Gateway 16/09/2025 16/09/2025 Create VPC, Create Subnets, Create Internet Gateway - Update worklog 3 - Practice creating Route table, Security groups 17/09/2025 17/09/2025 Create Route Table, Create Security Groups 4 - Learn about Deploying Amazon EC2 Instances 18/09/2025 18/09/2025 Deploying Amazon EC2 Instances, Youtube Tutorial - Practice creating EC2 server, Checking connection, creating NAT Gateway Create EC2 instance, Check connection, Create NAT Gateway - Translate a blog Translated Blog 3 5 - Practice using Reachability Analyzer 19/09/2025 19/09/2025 Create Reachability Analyzer - Team meeting to decide proposal project 6 - Translate a blog 20/09/2025 20/09/2025 Translated Blog 4 - Update worklog",
    "tags": [],
    "title": "Week 2 Worklog",
    "uri": "/en/1-worklog/1.2-week_2/index.html"
  },
  {
    "breadcrumb": "Internship Report",
    "content": "Week 1: Getting familiar with Hugo and basic AWS services\nWeek 2: Learn and pratice using VPC and its features\nWeek 3: Doing task B…\nWeek 4: Doing task C…\nWeek 5: Doing task D…\nWeek 6: Doing task E…\nWeek 7: Doing task F…\nWeek 8: Doing task G…\nWeek 9: Doing task H…\nWeek 10: Doing task I…\nWeek 11: Doing task J…\nWeek 12: Doing task K…",
    "description": "Week 1: Getting familiar with Hugo and basic AWS services\nWeek 2: Learn and pratice using VPC and its features\nWeek 3: Doing task B…\nWeek 4: Doing task C…\nWeek 5: Doing task D…\nWeek 6: Doing task E…\nWeek 7: Doing task F…\nWeek 8: Doing task G…\nWeek 9: Doing task H…\nWeek 10: Doing task I…\nWeek 11: Doing task J…\nWeek 12: Doing task K…",
    "tags": [],
    "title": "Worklog",
    "uri": "/en/1-worklog/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Translated Blogs",
    "content": "Định tuyến động sử dụng Máy chủ định tuyến AWS VPC Ammar Latif và Akshay Choudhry - 02/09/2025\nAmazon VPC Route Server cho phép triển khai cơ chế định tuyến động trong Amazon VPC bằng cách sử dụng giao thức BGP (Border Gateway Protocol). Với dịch vụ này, bạn có thể kiểm soát lưu lượng giữa các ứng dụng trên cloud và hệ thống on-premises một cách thông minh và hiệu quả hơn. BGP giúp bạn quản lý đường đi của dữ liệu linh hoạt, đặc biệt trong các tình huống xảy ra sự cố, đồng thời giảm thiểu khối lượng công việc thủ công và hạn chế rủi ro do con người.\nTrong bài viết này, chúng ta sẽ xem xét nhiều tình huống ứng dụng trong đó việc định tuyến động ở mức ứng dụng có ảnh hưởng trực tiếp đến cách dữ liệu được truyền đến các instance, cũng như cách hệ thống xử lý khi có sự cố để giảm gián đoạn xuống mức thấp nhất.\nYêu cầu kiến thức nền tảng Người đọc được giả định là đã nắm các khái niệm mạng cơ bản trong AWS liên quan đến tính sẵn sàng cao và cơ chế failover, chẳng hạn như Amazon Elastic Compute Cloud (Amazon EC2), Elastic Network Interfaces (ENI), Amazon VPC, bảng định tuyến VPC, và Availability Zone (AZ). Ngoài ra, bạn cũng nên hiểu về các nguyên lý mạng phổ biến như địa chỉ IP, CIDR, định tuyến mạng, BGP và Bidirectional Forwarding Detection (BFD). Bài viết này sẽ không đi sâu vào việc giải thích các khái niệm nền tảng đó, mà tập trung mô tả cách sử dụng chúng để triển khai giải pháp floating IP cho việc chuyển đổi dự phòng ứng dụng. Nếu bạn cần tìm hiểu thêm về nền tảng mạng AWS, hãy tham khảo tài liệu chính thức của AWS về VPC networking và các bài viết trong mục AWS Networking and Content Delivery Ở đây.\nCác tình huống kết nối ứng dụng Trong VPC, route table là thành phần quyết định luồng dữ liệu đi như thế nào. Chúng được gán cho subnet, Internet Gateway (IGW), hoặc Virtual Private Gateway để định nghĩa đường đi của lưu lượng trước khi đến đích. Ví dụ, bạn có thể thêm route để tất cả traffic đi qua một firewall trước khi đến ứng dụng, hoặc buộc subnet phải đi qua NAT Gateway, IGW, Peering Connection, hoặc VPN Gateway tùy nhu cầu.\nMột số ứng dụng đặc biệt (như thiết bị an ninh mạng hoặc xử lý traffic) yêu cầu khả năng kiểm soát chi tiết đường đi của dữ liệu để đảm bảo tất cả lưu lượng phải được gửi đến ứng dụng trung gian này trước khi đến điểm đích cuối cùng. Một ví dụ quen thuộc là việc điều hướng traffic đến thiết bị bảo mật để kiểm tra trước khi gửi sang dịch vụ chính.\nNếu chỉ dùng static route thì bạn có thể làm được điều đó, nhưng nó tồn tại nhiều hạn chế:\nKhông tự động thích ứng khi có sự cố. Cần thao tác thủ công để thay đổi. Quản lý trở nên phức tạp khi hệ thống mở rộng. Hệ quả là tăng nguy cơ lỗi con người và kéo dài thời gian phục hồi. Trong khi đó, dynamic routing có thể giải quyết: tự động cập nhật route table, đảm bảo khả năng mở rộng, và hỗ trợ failover mà không cần thao tác thủ công. Lưu ý: AWS khuyến nghị sử dụng Gateway Load Balancer (GWLB) cho nhu cầu HA và redundancy. Chỉ khi nào ứng dụng không hỗ trợ GWLB (hoặc môi trường không có GWLB, ví dụ AWS Local Zone), bạn mới nên cân nhắc giải pháp với Route Server.\nTính năng của VPC Route Server VPC Route Server cung cấp định tuyến động bên trong VPC thông qua BGP. Các ứng dụng mạng có thể dùng BGP để cập nhật bảng định tuyến của VPC, từ đó kiểm soát lưu lượng chi tiết và hỗ trợ failover tự động giữa các instance trong cùng hoặc khác AZ. Route Server cũng có thể cập nhật bảng định tuyến của VPC và IGW với các đường đi IPv4/IPv6 ưu tiên, giúp workload có khả năng chịu lỗi cao. Khi một AZ gặp sự cố, Route Server sẽ tự động cập nhật route table để chuyển hướng traffic sang AZ khác, cải thiện khả năng quản lý và tính tương thích với ứng dụng của bên thứ ba. Chúng ta sẽ xem xét các tình huống dưới đây để thấy được các khả năng định tuyến của VPC Route Server.\nTình huống #1: Dùng Floating IP cho application failover (chuyển đổi dự phòng ứng dụng) Giả sử bạn có ứng dụng quan trọng chạy trên một EC2 ở AZ1. Để đảm bảo tính sẵn sàng, bạn triển khai thêm một instance standby ở AZ2. Ứng dụng này không tích hợp với GWLB hoặc môi trường không hỗ trợ GWLB. Mục tiêu của bạn là duy trì ứng dụng hoạt động liên tục khi instance chính hoặc cả AZ1 bị lỗi.\nTrong kịch bản này, chúng ta minh họa cách sử dụng floating IP để thực hiện quá trình failover liền mạch giữa hai EC2 instance được triển khai ở hai AZ khác nhau trong một kiến trúc high availability. Bạn có một ứng dụng quan trọng chạy trên EC2 ở AZ1, đồng thời một EC2 khác được triển khai ở AZ2 để làm máy dự phòng. Ứng dụng này không được tích hợp với Gateway Load Balancer (GWLB), hoặc môi trường AWS của bạn (ví dụ Local Zone) không hỗ trợ GWLB. Mục tiêu đặt ra là đảm bảo cơ chế dự phòng cho ứng dụng trong trường hợp instance chính hoặc cả AZ1 gặp sự cố.\nBạn có thể dùng AWS CloudFormation từ repo aws-samples để triển khai kịch bản #1 vào tài khoản AWS của mình. Template CloudFormation sẽ tự động tạo ra môi trường sau:\nMột VPC với 3 subnet nằm trên 2 AZ. Bảng định tuyến (route table) cho cả 3 subnet. Tạo và gắn Internet Gateway (IGW) vào VPC, đồng thời thêm route mặc định ra IGW trong route table. Tạo và gắn Route Server cho VPC (Route Server sử dụng ASN 65000). Tạo hai Route Server Endpoint (RSE) trong mỗi subnet để đảm bảo tính sẵn sàng cao. Thiết lập các route server peer. Tạo hai EC2 instance để mô phỏng ứng dụng HA cần kiểm thử, sử dụng phần mềm Gobgp. Mỗi instance sẽ chạy BGP với ASN 65001 và kết nối BGP tới RSE trong subnet tương ứng. File cấu hình Gobgp (gobgpd.conf) được nạp sẵn thông qua user-data khi tạo EC2, và được lưu tại thư mục /home/ec2-user. Tạo thêm một instance test để ping tới loopback IP của ứng dụng HA. Có thể sử dụng AWS Systems Manager để truy cập và quản lý các instance vừa tạo. Tổng quan giải pháp Chúng ta sử dụng một địa chỉ floating IP được cấp từ dải CIDR nằm ngoài VPC để ứng dụng sử dụng. Client sẽ kết nối đến ứng dụng thông qua địa chỉ IP này. Trong trường hợp instance chính gặp sự cố, toàn bộ lưu lượng gửi đến floating IP sẽ được tự động chuyển hướng sang ENI của instance dự phòng ở AZ thứ hai. Cách làm này giúp giảm thiểu gián đoạn dịch vụ, nhờ áp dụng cơ chế floating IP kết hợp với định tuyến động trong VPC, mà không cần cập nhật cấu hình phía client hay thực hiện thao tác thủ công.\nHình 1. Instance#1 đang hoạt động\rNhư minh họa ở Hình 1, ứng dụng hoạt động theo mô hình active/standby giữa hai AZ. Cả hai EC2 instance cùng quảng bá một địa chỉ loopback (ví dụ 172.16.1.1/32) ra mạng thông qua phiên BGP với hai VPC RSE nằm trong cùng một subnet. Việc sử dụng hai RSE nhằm đảm bảo tính dự phòng và nâng cao khả năng sẵn sàng của dịch vụ định tuyến.\nHình 2. Các điểm cuối (endpoint) của máy chủ định tuyến trong VPC\rHình 3. Các thiết bị ngang hàng của máy chủ định tuyến trong VPC\rHình 4. Bảng RIB (Routing Information Base) của máy chủ định tuyến\rĐể đảm bảo lưu lượng mạng luôn được chuyển đến instance đang hoạt động, ứng dụng sử dụng thuộc tính BGP AS Path. Instance hoạt động sẽ quảng bá tuyến với AS Path ngắn hơn, trong khi instance dự phòng thêm nhiều số AS khác vào đường đi, khiến tuyến đó bị ưu tiên thấp hơn. Do BGP luôn chọn tuyến có AS Path ngắn nhất, nên tuyến từ instance hoạt động sẽ được chọn làm tuyến chính. Ngoài ra, các thuộc tính khác của BGP như Multi-Exit Discriminator (MED) cũng có thể được dùng để thiết lập ưu tiên định tuyến tương tự.\nCả instance hoạt động và dự phòng đều quảng bá địa chỉ 172.16.1.1/32 qua BGP đến cả hai Route Server Endpoint (RSE) trong subnet của chúng.\nMáy chủ định tuyến VPC nhận được 4 quảng bá cho cùng một tiền tố. Điều này được minh họa ở Hình 4, nơi loopback 172.16.1.1/32 được gửi đến từ cả bốn RSE.\nDựa vào quy tắc chọn đường đi của BGP, máy chủ ưu tiên tuyến từ instance hoạt động vì có AS Path ngắn hơn. Trong Hình 4 thể hiện rõ rằng chỉ một trong bốn tuyến được chọn và cài đặt.\nMáy chủ định tuyến VPC sau đó xác định ENI gắn với instance hoạt động và cập nhật bảng định tuyến của VPC để chuyển tiếp lưu lượng tới ENI-A cho địa chỉ 172.16.1.1/32.\nHình 5. Bảng định tuyến VPC được cập nhật, trong đó tuyến 172.16.1.1/32 trỏ đến ENI của instance đang hoạt động.\rBạn có thể kiểm tra cấu hình Gobgp bằng cách kết nối vào một trong các instance (instance-rs-az1 hoặc instance-rs-az2) thông qua EC2 Session Manager.\nTệp cấu hình Gobgp nằm tại /home/ec2-user/gobgpd.conf.\nsh-5.2$ sudo more /home/ec2-user/gobgpd.conf [global.config] as = 65001 router-id = \"10.0.1.203\" [[neighbors]] [neighbors.config] neighbor-address = \"10.0.1.230\" peer-as = 65000 [[neighbors.afi-safis]] [neighbors.afi-safis.config] afi-safi-name = \"ipv4-unicast\" [[neighbors]] [neighbors.config] neighbor-address = \"10.0.1.136\" peer-as = 65000 [[neighbors.afi-safis]] [neighbors.afi-safis.config] afi-safi-name = \"ipv4-unicast\"\rSử dụng lệnh sau để kiểm tra trạng thái BGP neighbor. Kết quả sẽ hiển thị hai neighbor, tương ứng với hai VPC RSE trong subnet của instance.\nsh-5.2$ sudo /home/ec2-user/gobgp neighbor Peer AS Up/Down State |#Received Accepted 10.0.1.136 65000 22:43:07 Establ | 0 0 10.0.1.230 65000 22:43:08 Establ | 0 0\rKiểm tra rằng tuyến loopback đã được quảng bá qua BGP:\nsh-5.2$ sudo /home/ec2-user/gobgp global rib Network Next Hop AS_PATH Age Attrs *\u003e 172.16.1.1/32 0.0.0.0 22:42:21 [{Origin: ?}]\rĐể kiểm tra thiết lập định tuyến, bạn có thể truy cập vào instance kiểm thử (test-instance) bằng phương pháp Systems Manager. Sau khi đăng nhập thành công, hãy ping đến địa chỉ 172.16.1.1. Bạn sẽ nhận được phản hồi xuất phát từ instance đang hoạt động “instance-rs-az1”.\nsh-5.2$ ping 172.16.1.1 PING 172.16.1.1 (172.16.1.1) 56(84) bytes of data. 64 bytes from 172.16.1.1: icmp_seq=1 ttl=127 time=0.712 ms 64 bytes from 172.16.1.1: icmp_seq=2 ttl=127 time=0.338 ms 64 bytes from 172.16.1.1: icmp_seq=3 ttl=127 time=0.378 ms\rPhát hiện và khôi phục khi xảy ra Failover Để mô phỏng một tình huống failover, bạn có thể tắt instance đang hoạt động (instance-rs-az1).\nNếu instance đang hoạt động gặp sự cố hoặc không thể truy cập, BGP sẽ phát hiện lỗi trong khoảng thời gian timeout đã cấu hình.\nVPC Route Server đánh dấu phiên BGP với instance đang hoạt động là down và rút tuyến đường ra khỏi bảng RIB.\nMột quá trình BGP re-convergence được kích hoạt, và tuyến đường do instance dự phòng quảng bá sẽ được chọn làm đường đi tốt nhất.\nBảng định tuyến VPC được cập nhật để chuyển tiếp lưu lượng đến 172.16.1.1/32 qua ENI của instance dự phòng (ENI-B).\nLưu lượng được chuyển tiếp liền mạch sang instance dự phòng, duy trì tính sẵn sàng của ứng dụng mà không gây gián đoạn cho client.\nĐể kiểm tra thiết lập định tuyến, bạn có thể truy cập vào instance kiểm thử (test-instance) bằng phương pháp Systems Manager. Sau khi đăng nhập, hãy ping đến 172.16.1.1. Bạn sẽ nhận được phản hồi từ instance hiện tại đang hoạt động (instance-rs-az2).\nsh-5.2$ ping 172.16.1.1 PING 172.16.1.1 (172.16.1.1) 56(84) bytes of data. 64 bytes from 172.16.1.1: icmp_seq=1 ttl=127 time=0.712 ms 64 bytes from 172.16.1.1: icmp_seq=2 ttl=127 time=0.338 ms 64 bytes from 172.16.1.1: icmp_seq=3 ttl=127 time=0.378 ms\rHình 6. Instance2 đảm nhận vai trò hoạt động\rHình 7. Bảng định tuyến đã được cập nhật để trỏ đến ENI của Inst2\rTình huống #2: Kiểm tra lưu lượng ingress VPC\nHãy xem xét kịch bản khi bạn có một mô hình bảo mật tập trung, trong đó các thiết bị tường lửa (được triển khai dưới dạng EC2 instance) sẽ kiểm tra toàn bộ lưu lượng north-south hoặc east-west trong VPC của bạn. Các tường lửa này đóng vai trò then chốt trong tư thế bảo mật và phải luôn khả dụng để kiểm tra cũng như chuyển tiếp lưu lượng. Để duy trì tính sẵn sàng cao, bạn triển khai hai EC2 firewall ở hai AZ khác nhau. Mục tiêu là đảm bảo rằng nếu firewall đang hoạt động gặp sự cố, thì lưu lượng sẽ được chuyển hướng liền mạch sang firewall dự phòng.\nTrong kịch bản này, chúng ta minh họa cách triển khai tính khả dụng cao (HA) và cơ chế failover cho các firewall stateful được triển khai trên nhiều AZ trong AWS, bằng cách sử dụng VPC Route Server và cập nhật định tuyến động.\nTổng quan giải pháp Tất cả lưu lượng đi vào VPC thông qua IGW sẽ được định tuyến đến firewall để kiểm tra trước khi đi vào application subnet. Tương tự, toàn bộ lưu lượng đi ra từ application subnet cũng sẽ được định tuyến đến firewall để kiểm tra trước khi được gửi ra internet.\nHình dưới đây minh họa một thiết bị firewall được cài đặt trên một EC2 instance trong subnet A. Thiết bị này sẽ kiểm tra toàn bộ lưu lượng đi từ IGW đến subnet B (application subnet) và từ subnet B ra IGW.\nHình 8. Tình huống #2 khi firewall 1 đang hoạt động\rMỗi firewall thiết lập bốn phiên BGP: hai cho subnet A và hai cho subnet B, bao gồm cả subnet ứng dụng và bảng định tuyến IGW.\nĐể đảm bảo chỉ có một firewall được sử dụng tại một thời điểm, độ ưu tiên đường đi trong BGP được điều chỉnh bằng cách sử dụng các metric của BGP. Chúng ta tập trung vào các metric sau:\nAS_Path: Thuộc tính BGP cho thấy chuỗi các số hiệu Hệ thống Tự trị (AS) mà một tuyến đường đã đi qua. Nó vừa đóng vai trò là cơ chế ngăn vòng lặp, vừa là tiêu chí lựa chọn đường đi, trong đó đường đi ngắn hơn sẽ được ưu tiên.\nMED (Multi-Exit Discriminator): Thuộc tính BGP được sử dụng để ảnh hưởng đến lưu lượng vào bằng cách đề xuất điểm vào ưa thích khi tồn tại nhiều kết nối giữa hai hệ thống tự trị. Giá trị MED thấp hơn sẽ được ưu tiên.\nFirewall đang hoạt động sẽ quảng bá các prefix với thuộc tính BGP ưu tiên cao nhất, trong khi firewall dự phòng quảng bá cùng prefix nhưng với các thuộc tính ít ưu tiên hơn. Trong kịch bản này, chúng ta sử dụng AS path prepending, trong đó firewall dự phòng sẽ tăng độ dài AS path khi quảng bá prefix đến RSE.\nBảng định tuyến Internet Gateway\nCác bảng định tuyến gắn với IGW (Internet Gateway) kiểm soát đường đi mà lưu lượng internet đi vào VPC sẽ sử dụng. Người dùng thường dùng nó để chèn firewall và các chức năng mạng ảo khác vào đường đi của lưu lượng internet inbound.\nCả firewall hoạt động và firewall dự phòng đều được kết nối với VPC Route Server và quảng bá CIDR của subnet ứng dụng đến các RSE. Tuy nhiên, firewall dự phòng quảng bá tuyến với AS path dài hơn. VPC Route Server sẽ chạy thuật toán chọn đường tốt nhất của BGP và cài đặt tuyến được quảng bá bởi firewall hoạt động.\nBảng định tuyến cho subnet IGW có tuyến như sau:\nApplication subnet CIDR ---\u003e Active Firewall ENI\rVPC sẽ định tuyến lưu lượng có đích đến subnet ứng dụng đến ENI của firewall hoạt động.\nBảng định tuyến của subnet ứng dụng Cả tường lửa đang hoạt động lẫn dự phòng đều được kết nối với VPC Route Server và đều quảng bá địa chỉ 0.0.0.0/0 đến các RSE. Tuy nhiên, tường lửa dự phòng quảng bá 0.0.0.0/0 với một đường dẫn AS dài hơn. VPC Route Server sẽ chạy thuật toán BGP để chọn tuyến đường tốt nhất và chỉ sử dụng tuyến được quảng bá bởi tường lửa đang hoạt động.\nBảng định tuyến của subnet ứng dụng có tuyến như sau:\n0.0.0.0/0 ---\u003e ENI của tường lửa đang hoạt động\rĐiều này có nghĩa là mọi lưu lượng từ server ứng dụng sẽ đi qua tường lửa đang hoạt động trước khi ra Internet.\nBảng định tuyến của subnet tường lửa\nBảng định tuyến của subnet dành cho tường lửa có tuyến tĩnh sau:\n0.0.0.0/0 ---\u003e igw-id\rTức là tất cả lưu lượng từ đây sẽ được gửi thẳng ra Internet Gateway (IGW).\nPhát hiện chuyển đổi dự phòng với BFD\nBFD được bật trên mỗi phiên BGP giữa các tường lửa và các RSE của VPC. BFD cho phép phát hiện sự cố rất nhanh — thường dưới một giây — bằng cách liên tục trao đổi các gói điều khiển.\nTrong trường hợp tường lửa gặp sự cố:\nBFD phát hiện phiên BGP giữa tường lửa đang hoạt động và các RSE bị lỗi.\nCác RSE đánh dấu phiên BGP này là DOWN.\nCác RSE rút lại các tuyến ưu tiên (bao gồm cả tiền tố nội bộ và bên ngoài) mà tường lửa bị lỗi đang quảng bá.\nQuá trình hội tụ lại BGP diễn ra — các RSE chọn tuyến thay thế (dự phòng) được quảng bá bởi tường lửa còn hoạt động.\nTuyến này trở thành tuyến active trong bảng điều khiển định tuyến của VPC.\nLưu lượng tự động được chuyển hướng sang tường lửa dự phòng.\nHình 9. Tường lửa FW1 gặp sự cố dẫn đến lưu lượng được chuyển hướng sang FW2.\rPhục hồi/Quay lại (Failback/Recovery) Khi tường lửa bị lỗi phục hồi và thiết lập lại các phiên BGP và BFD:\nNó bắt đầu quảng bá lại các thuộc tính BGP ưu tiên.\nCác RSE phát hiện tuyến đường hấp dẫn hơn và chuyển lưu lượng trở lại tường lửa đã được phục hồi.\nQuá trình này có thể được tự động hóa hoặc điều khiển theo chính sách quản trị (ví dụ: chuyển đổi dự phòng ưu tiên hoặc không ưu tiên).\nƯu điểm của việc sử dụng VPC Route Server với Failover dựa trên BGP + BFD:\nHội tụ nhanh: Phát hiện sự cố dưới một giây nhờ BFD.\nHoàn toàn tự động: Không cần script hay can thiệp thủ công.\nMở rộng dễ dàng: Hoạt động trên nhiều tiền tố và instance.\nĐiều khiển gốc đám mây: Tích hợp trực tiếp với lớp định tuyến của VPC.\nChuẩn hóa giao thức: Sử dụng hành vi BGP theo tiêu chuẩn ngành.\nNhững điểm cần lưu ý\nQuá trình hội tụ lại định tuyến có thể gây ra một khoảng thời gian gián đoạn. Nếu ứng dụng đã tích hợp với GWLB, hãy cân nhắc sử dụng GWLB làm lựa chọn đầu tiên cho việc chuyển đổi dự phòng ứng dụng.\nĐảm bảo tắt tính năng route propagation nếu bạn đang quản lý tuyến đường thủ công.\nSử dụng BFD hoặc các công cụ phát hiện sự cố nhanh khác để hội tụ nhanh hơn.\nĐảm bảo các tuyến đường đối xứng nếu bạn thực hiện kiểm tra đường trả về (return-path inspection).\nBật giám sát và cảnh báo để theo dõi tình trạng hệ thống, các thay đổi về tuyến đường và các sự kiện chuyển đổi dự phòng.\nKết luận Trong bài viết này, chúng ta đã tìm hiểu cách sử dụng Amazon VPC Route Server để xây dựng các thiết kế mạng trong đám mây có khả năng mở rộng, chịu lỗi và an toàn, bằng cách bật tính năng chuyển đổi dự phòng cho các ứng dụng quan trọng và triển khai kiến trúc khả dụng cao. Chúng tôi đã giới thiệu hai mô hình kiến trúc khác nhau và cung cấp các chi tiết triển khai. VPC Route Server mở ra các khả năng định tuyến nâng cao trong AWS bằng cách tích hợp các giao thức BGP và BFD theo tiêu chuẩn ngành vào mạng VPC gốc. Để bắt đầu với VPC Route Server ngay hôm nay, bạn có thể tham khảo tài liệu và hướng dẫn Amazon VPC Route Server Get Started.\nCập nhật: Vào ngày 15 tháng 9 năm 2025, phiên bản trước của bài viết có sử dụng các biểu tượng kiến trúc AWS đã lỗi thời. Bài viết đã được cập nhật để phản ánh bộ biểu tượng kiến trúc AWS hiện tại.\nLink bài viết gốc: (https://aws.amazon.com/blogs/networking-and-content-delivery/dynamic-routing-using-amazon-vpc-route-server/)",
    "description": "Định tuyến động sử dụng Máy chủ định tuyến AWS VPC Ammar Latif và Akshay Choudhry - 02/09/2025\nAmazon VPC Route Server cho phép triển khai cơ chế định tuyến động trong Amazon VPC bằng cách sử dụng giao thức BGP (Border Gateway Protocol). Với dịch vụ này, bạn có thể kiểm soát lưu lượng giữa các ứng dụng trên cloud và hệ thống on-premises một cách thông minh và hiệu quả hơn. BGP giúp bạn quản lý đường đi của dữ liệu linh hoạt, đặc biệt trong các tình huống xảy ra sự cố, đồng thời giảm thiểu khối lượng công việc thủ công và hạn chế rủi ro do con người.",
    "tags": [],
    "title": "Blog 2",
    "uri": "/en/3-translated_blogs/blog_2/index.html"
  },
  {
    "breadcrumb": "Internship Report",
    "content": "Multi-Region SaaS Task Management Platform A Global AWS Solution for Low-Latency, Resilient Collaboration 1. Executive Summary The Multi-Region SaaS Task Management Platform is designed to deliver a Trello/Asana-like experience with low latency, high availability, and global scalability.\nBuilt with Spring Boot microservices and Aurora MySQL Global Database, the platform ensures real-time collaboration, task/board management, and cross-region resilience.\nBy leveraging AWS global infrastructure, the system provides:\nLow-latency access through Aurora Global Database read replicas. High availability via multi-AZ and multi-region failover. Global content delivery using CloudFront, Route 53, and S3 CRR. Optional active-active metadata via DynamoDB Global Tables. The result is a platform where users collaborate seamlessly across continents — even during regional outages — while maintaining operational efficiency and cost predictability.\n2. Problem Statement 2.1. What’s the Problem? Traditional SaaS task management platforms typically operate within a single AWS region, which can lead to several limitations. Users located far from the primary region often experience high latency, reducing responsiveness and overall user experience. Additionally, relying on a single region introduces a single point of failure, making the platform vulnerable to regional outages or disruptions. This architecture also restricts scalability and performance for global teams, hindering seamless collaboration across different geographic locations.\n2.2. The Solution This project introduces a multi-region architecture using AWS global services.\nKey highlights:\nAurora Global Database – single-writer (US) with multi-region read replicas (EU, Asia). ECS Fargate microservices per region for localized compute. Route 53 latency-based routing for intelligent traffic distribution. S3 Cross-Region Replication (CRR) + CloudFront CDN for global file and static asset delivery. EventBridge + SNS + Lambda for cross-region event propagation. This hybrid design achieves resilience, performance, and scalability while maintaining Aurora MySQL as the central datastore.\n2.3. Benefits and ROI Reduced latency for global users. High reliability with built-in failover \u0026 recovery. Cost-efficient vs fully active-active setups. Enterprise-ready foundation for global SaaS applications. 3. Solution Architecture 3.1. Architecture Overview Microservices: Auth, Board, Task, Notification – deployed via ECS Fargate per region. Database: Aurora MySQL Global Database – single-writer (US), read replicas (EU, Asia). Cache: ElastiCache Redis – regional cache for session \u0026 hot data. Storage: S3 with CRR + CloudFront for content delivery. Routing: Route 53 (latency routing) + ALB/API Gateway + CloudFront + WAF. Events: EventBridge + SNS + Lambda for domain event sync. Optional: DynamoDB Global Tables for active-active metadata. 3.2. AWS Services Used Category Services Purpose Compute ECS Fargate Containerized microservices Database Aurora MySQL Global Cross-region data consistency Caching ElastiCache Redis Session \u0026 task caching Storage S3 + CloudFront Static assets \u0026 file replication Networking Route 53, ALB, VPC Global routing \u0026 private networking CI/CD CodeCommit, CodeBuild, CodePipeline, ECR + CRR Build, deploy, and replicate container images Security WAF, Secrets Manager + CRR, IAM Protection \u0026 secret management Observability CloudWatch, X-Ray Logging, metrics, tracing Automation Lambda, EventBridge Cross-region events \u0026 failover automation 4. Architecture Enhancements (Based on Review) Area Current Recommended Improvement Traffic Routing Route 53 latency-based Use AWS Global Accelerator for intelligent routing \u0026 faster failover Session Caching Local Redis per region Use ElastiCache Global Datastore or make microservices stateless (JWT) Observability Basic CloudWatch Add centralized observability stack (X-Ray, OpenTelemetry, ELK) Failover Automation Manual Aurora promotion Automate via Route 53 health checks + Lambda/SSM Automation Security WAF + Secrets Manager Add VPC Endpoints (S3, ECR, Secrets) \u0026 KMS multi-region keys ✅ Outcome: Fully enterprise-grade architecture — automated, observable, secure, and globally performant.\n5. Service Roles Overview AWS Service Role in Architecture Route 53 DNS routing users to nearest region (latency/failover-based). CloudFront CDN distributing static assets globally. WAF Filters malicious traffic (SQLi, XSS, bots). VPC \u0026 Subnets Isolated network with private and public subnets. ECS Fargate Runs containerized Spring Boot services serverlessly. ECR + CRR Stores container images with cross-region replication. ElastiCache (Redis) Caching and session management. Aurora MySQL Global Database Central transactional DB (single writer, multi-reader). S3 + CRR Stores user-uploaded files, static assets with replication. Secrets Manager + CRR Securely manages secrets and syncs them cross-region. CodeCommit / CodeBuild / CodePipeline CI/CD for automated builds \u0026 deployments. EventBridge / SNS / Lambda Event-driven communication and automation. CloudWatch / X-Ray Monitoring, logging, tracing for all services. 6. Service Flow A. User Request Flow User accesses the global domain. Route 53 routes to the nearest region via latency-based routing. CloudFront serves cached static assets (from S3 CRR). Dynamic API requests hit ALB → ECS Fargate containers. ECS reads/writes data: ElastiCache (Redis) for hot data/session. Aurora (local reader or remote writer). S3 for file upload (auto CRR). Secrets are fetched securely from Secrets Manager. On region failure, Route 53 or Global Accelerator reroutes traffic to standby region. B. Developer CI/CD Flow Developer pushes code → CodeCommit. CodePipeline triggers CodeBuild to build Docker images. Image pushed to ECR (Region A) → auto replicated to ECR (Region B). ECS Fargate in both regions deploys containers automatically. S3 CRR syncs frontend/static files globally. Secrets Manager CRR keeps environment configs consistent. C. Data \u0026 HA/DR Flow Data Type Replication Method Purpose App Data Aurora Global DB Transactional consistency Cache Local Redis / Global Datastore Reduce latency, handle session Static Files S3 CRR Fast global access, DR Secrets Secrets Manager CRR Secure config sync Container Images ECR CRR Local image availability per region 7. Technical Implementation Plan Duration: 8 Weeks\nPhase Week Key Deliverables Planning 0 Choose primary (us-east-1) \u0026 secondary (eu-west-1, ap-southeast-1). Define VPC, S3 naming, DNS. MVP Deployment 1–3 Deploy core microservices in primary region with Aurora single-cluster. Multi-Region Expansion 4–5 Convert to Aurora Global DB, deploy ECS in EU \u0026 Asia, enable CRR \u0026 latency routing. Cross-Region Events \u0026 Failover 6–7 Setup EventBridge/SNS/Lambda, automate failover playbooks. Testing \u0026 Demo 8 End-to-end latency test, simulate failover, final demo \u0026 documentation. 8. Monitoring \u0026 Automation CloudWatch: Metrics, logs, and custom dashboards for ECS, Aurora, Redis. X-Ray: Distributed tracing across microservices. CloudWatch Alarms: Trigger notifications via SNS. Lambda + SSM Automation: Auto promote Aurora replica \u0026 update DNS during failover. AWS Budgets: Monitor monthly spend. 9. Security Enhancements WAF rulesets for SQLi/XSS/bot prevention. Secrets Manager + multi-region CRR for secure key sync. IAM least privilege roles for ECS \u0026 Lambda. VPC Endpoints for private traffic to AWS services. KMS multi-region keys for encryption-at-rest (Aurora, S3, ECR). 10. Budget Estimation Service Monthly Cost (Est.) Aurora MySQL Global Database ~$350 ECS Fargate (3 regions) ~$200 S3 + CloudFront ~$30 Route 53 ~$5 ECR + CRR ~$10 EventBridge/SNS/Lambda ~$20 Monitoring (CloudWatch/X-Ray) ~$15 Total $630/month ($7,500/year) Optimizations: Reduce active regions or scale down ECS clusters as needed.\n11. Risk Assessment Risk Impact Probability Mitigation Aurora failover lag Medium Low Automated failover + tested playbooks Cross-region latency Medium High Global Accelerator / caching Cost overruns High Medium AWS budget alerts, scaling policies Contingency:\nManual Aurora promotion for prolonged outages. Use DynamoDB Global Tables for metadata if Aurora lag becomes an issue. Scale down to 2 active regions to save cost if needed. 12. Expected Outcomes Technical Improvements\nLow-latency experience for users worldwide. High resilience and disaster recovery readiness. End-to-end observability and automation. Long-Term Value\nEnterprise-grade SaaS architecture pattern. Scalable foundation for future analytics/ML integrations. Demonstrates AWS multi-region excellence. ✅ Final Verdict:\nThe proposed architecture is production-ready, scalable, and globally resilient.\nWith additional automation, observability, and intelligent routing (Global Accelerator), it meets enterprise-grade multi-region SaaS standards — suitable for a real-world Trello/Todoist-class product.",
    "description": "Multi-Region SaaS Task Management Platform A Global AWS Solution for Low-Latency, Resilient Collaboration 1. Executive Summary The Multi-Region SaaS Task Management Platform is designed to deliver a Trello/Asana-like experience with low latency, high availability, and global scalability.\nBuilt with Spring Boot microservices and Aurora MySQL Global Database, the platform ensures real-time collaboration, task/board management, and cross-region resilience.\nBy leveraging AWS global infrastructure, the system provides:\nLow-latency access through Aurora Global Database read replicas. High availability via multi-AZ and multi-region failover. Global content delivery using CloudFront, Route 53, and S3 CRR. Optional active-active metadata via DynamoDB Global Tables. The result is a platform where users collaborate seamlessly across continents — even during regional outages — while maintaining operational efficiency and cost predictability.",
    "tags": [],
    "title": "Proposal",
    "uri": "/en/2-proposal/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Week 3 Objectives Learn and get familiar with Route 53 and its related features Translate several blogs Update worklog structure Tasks to be carried out this week Day Task Start Date Completion Date Reference Material 1 - Learn about Route 53 and its feature 22/09/2025 22/09/2025 Route 53 - Translate a blog Translated Blog 4 2 - Practice creating Key pair, CloudFormation Template, Configure Security Group 23/09/2025 23/09/2025 Create Key pair, Initialize CloudFormation Template 3 - Practice creating Key pair, CloudFormation Template, Configure Security Group 24/09/2025 24/09/2025 Create Key pair, Initialize CloudFormation Template, Configure Security Group 4 - Practice connecting to Remote Desktop Gateway (RDGW) by Remote Desktop Protocol (RDP) 25/09/2025 25/09/2025 Connecting to RDGW, Youtube tutorial - Team meeting to discuss about workshop project 5 - Practice deploy Microsoft Active Directory 26/09/2025 26/09/2025 Deploy Microsoft Active Directory 6 - Practice deploy Microsoft Active Directory 27/09/2025 27/09/2025 Deploy Microsoft Active Directory - Pratice configure DNS Configure DNS",
    "description": "Week 3 Objectives Learn and get familiar with Route 53 and its related features Translate several blogs Update worklog structure Tasks to be carried out this week Day Task Start Date Completion Date Reference Material 1 - Learn about Route 53 and its feature 22/09/2025 22/09/2025 Route 53 - Translate a blog Translated Blog 4 2 - Practice creating Key pair, CloudFormation Template, Configure Security Group 23/09/2025 23/09/2025 Create Key pair, Initialize CloudFormation Template 3 - Practice creating Key pair, CloudFormation Template, Configure Security Group 24/09/2025 24/09/2025 Create Key pair, Initialize CloudFormation Template, Configure Security Group 4 - Practice connecting to Remote Desktop Gateway (RDGW) by Remote Desktop Protocol (RDP) 25/09/2025 25/09/2025 Connecting to RDGW, Youtube tutorial - Team meeting to discuss about workshop project 5 - Practice deploy Microsoft Active Directory 26/09/2025 26/09/2025 Deploy Microsoft Active Directory 6 - Practice deploy Microsoft Active Directory 27/09/2025 27/09/2025 Deploy Microsoft Active Directory - Pratice configure DNS Configure DNS",
    "tags": [],
    "title": "Week 3 Worklog",
    "uri": "/en/1-worklog/1.3-week_3/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Translated Blogs",
    "content": "Cách CommBank xây dựng nền tảng giao dịch CommSec có độ sẵn sàng cao và vận hành bền vững Kris Severijns, Aaron Bull, Henry Zhao, và Terence Lum – 19/08/2025\nCommSec, công ty môi giới chứng khoán trực tuyến hàng đầu tại Úc và là công ty con của Commonwealth Bank of Australia (CommBank), hỗ trợ hàng triệu khách hàng gia tăng tài sản thông qua việc đầu tư dễ dàng, tiện lợi và chi phí hợp lý vào cả thị trường trong nước lẫn quốc tế.\nCommSec đóng vai trò quan trọng trong hành trình tài chính của khách hàng, cung cấp các dịch vụ thiết yếu như nghiên cứu thị trường, quản lý danh mục và thực hiện giao dịch. Với kỳ vọng từ phía khách hàng về khả năng hoạt động 24/7, nền tảng này phải duy trì độ tin cậy ở mức cao nhất. Đồng thời, là tổ chức được quản lý bởi Ủy ban Chứng khoán và Đầu tư Úc (ASIC), CommSec phải bảo đảm khả năng vận hành bền vững và tuân thủ yêu cầu về lưu trữ dữ liệu tại Úc để giữ vững sự minh bạch và an toàn cho thị trường tài chính. Trong bài viết này, chúng ta sẽ cùng tìm hiểu cách CommSec tận dụng dịch vụ AWS để xây dựng một nền tảng giao dịch vừa ổn định, vừa hiệu năng cao, vừa đáp ứng quy định khắt khe và mang đến trải nghiệm vượt trội cho khách hàng.\nThách thức khi vận hành đa đám mây CommSec là một trong những hệ thống trọng yếu đầu tiên của CommBank chuyển từ trung tâm dữ liệu on-premises sang môi trường public cloud. Năm 2015, CommBank bắt đầu dịch chuyển tầng web và mobile của CommSec, đến 2019 thì hoàn tất việc chuyển cả tầng ứng dụng. Là một trong những đơn vị tiên phong, CommSec ban đầu lựa chọn kiến trúc đa đám mây (active-active) để chứng minh tính bền vững của cloud, sử dụng AWS Asia Pacific (Sydney) Region như một miền lỗi (fault domain).\nTuy nhiên, việc vận hành đa đám mây mang đến nhiều khó khăn: duy trì song song hai pipeline triển khai, một mô hình vận hành trải rộng trên hai nền tảng cloud khác nhau, cùng quy trình failover phức tạp dựa vào cơ chế “witness” bên ngoài. Điều này không chỉ làm tăng chi phí vận hành mà còn kéo chậm tốc độ phát triển, hạn chế khả năng tận dụng dịch vụ native của cloud, khiến đổi mới sáng tạo bị bó hẹp.\nHướng giải pháp Khi AWS trở thành nhà cung cấp cloud chiến lược của CommBank, đội ngũ CommSec đã tái kiến trúc toàn bộ tầng ứng dụng, web và mobile vào đầu năm 2025 để vận hành hoàn toàn trên AWS. Với bước chuyển đổi này, họ đã thiết lập một “ranh giới cô lập sự cố” (fault isolation boundary) mới, đơn giản hóa kiến trúc nhưng vẫn giữ được mức độ bền vững tương đương giải pháp đa đám mây trước đây.\nTrong thiết kế cũ, nếu một cloud provider hoặc trung tâm dữ liệu gặp sự cố, lưu lượng sẽ được chuyển sang nền tảng còn lại. Với kiến trúc mới chỉ trên AWS, CommSec chọn Availability Zone (AZ) làm ranh giới cô lập sự cố. Nhờ Amazon Application Recovery Controller (ARC) zonal shift, họ có thể chuyển lưu lượng ra khỏi AZ gặp sự cố để giảm thiểu tác động đến khách hàng, đồng thời vẫn đáp ứng yêu cầu về sự tách biệt cả vật lý và logic giữa các AZ trong một Region. ARC zonal shift được tích hợp sẵn với load balancer, cho phép điều hướng lưu lượng mà không cần phụ thuộc vào control plane. Ngoài ra, nó còn giúp quản lý tình huống “gray failure” (hệ thống bị lỗi một phần) để giảm thiểu ảnh hưởng tới khách hàng.\nViệc hợp nhất hệ thống lên AWS và tận dụng ARC zonal shift để xử lý sự cố đã giúp đội ngũ CommSec đạt được nhiều lợi ích quan trọng:\nKhả năng failover tích hợp sẵn từ ARC zonal shift cho phép họ xây dựng quy trình tự động và toàn diện để nhanh chóng chuyển hướng lưu lượng ra khỏi một Availability Zone gặp sự cố.\nPlaybook chi tiết được xây dựng và kiểm thử định kỳ nhằm đảm bảo các quy trình failover luôn hiệu quả và đội ngũ vận hành luôn sẵn sàng.\nPipeline triển khai tiêu chuẩn hóa cùng cấu hình đơn giản hơn giúp việc cập nhật hệ điều hành và triển khai code nhanh gấp đôi so với trước.\nGiảm 25% dung lượng cơ bản khi vận hành nền tảng CommSec trên ba Availability Zone của AWS, so với mô hình cũ phải duy trì bốn stack trên hai cloud, từ đó cắt giảm đáng kể chi phí vận hành.\nSơ đồ sau minh họa kiến trúc giải pháp.\nNhóm CommSec đã triển khai một số cải tiến nhằm tăng cường khả năng chịu lỗi:\nDo việc scale-in và scale-out diễn ra nhiều lần mỗi ngày, quá trình mở rộng cần đảm bảo tính ổn định cao nhất. Nhóm CommSec đã loại bỏ các phụ thuộc vào tài nguyên bên ngoài trong toàn bộ quy trình bootstrap khi scale-out bằng cách lưu trữ và truy xuất các tệp nhị phân ứng dụng trực tiếp từ Amazon Simple Storage Service (Amazon S3) trong cùng tài khoản AWS.\nVì lưu lượng truy cập biến động mạnh, đặc biệt vào thời điểm mở cửa thị trường (lượng truy cập của CommSec thường tăng gấp ba lần chỉ trong khoảng 9:59 đến 10:02 sáng), nhóm đã thiết lập Load Balancer Capacity Unit (LCU) reservations cho các load balancer ở tầng web. Cách này giúp đảm bảo Application Load Balancer (ALB) có đủ dung lượng ngay từ đầu phiên giao dịch, thay vì phải phụ thuộc vào cơ chế scaling phản ứng đối với các đợt tăng đột biến đã biết trước.\nHọ cũng triển khai cơ chế kiểm tra sức khỏe (health check) của ALB để phát hiện các lỗi nghiêm trọng, từ đó tự động loại bỏ các instance gặp sự cố khỏi target group. Lưu lượng truy cập sẽ được chuyển hướng khỏi các instance lỗi, đồng thời hệ thống sẽ gửi cảnh báo để đội vận hành kịp thời điều tra và xử lý.\nNgoài ra, các kết nối AWS Direct Connect mới được thiết lập từ AWS đến Australian Liquidity Centre (trung tâm đặt hạ tầng chính của Sở giao dịch chứng khoán Úc – ASX, nơi vận hành các hệ thống giao dịch, thanh toán và bù trừ) nhằm nâng cao độ tin cậy trong kết nối tới các thị trường tài chính, bao gồm cả ASX và CBOE.\nARC zonal shift để giúp giảm thiểu sự cố Năm 2023, AWS đã ra mắt zonal shift, một phần của Amazon Application Recovery Controller. Với zonal shift, bạn có thể chuyển hướng lưu lượng ứng dụng ra khỏi một Availability Zone theo cách thức highly available cho các tài nguyên được hỗ trợ. Hành động này giúp nhanh chóng khôi phục một ứng dụng khi một Availability Zone gặp sự cố, giảm thời gian và mức độ ảnh hưởng đến ứng dụng do các sự kiện như mất điện, hỏng phần cứng hoặc phần mềm. Zonal shift hỗ trợ Application và Network Load Balancers, Amazon EC2 Auto Scaling Groups, và Amazon Elastic Kubernetes Service (Amazon EKS).\nNhóm CommSec đã bật ARC zonal shift trên các ALB cho tầng web và ứng dụng của họ với cross-zone load balancing được bật. Khi bắt đầu, zonal shift thực hiện hai hành động. Thứ nhất, nó gỡ bỏ địa chỉ IP của node load balancer trong Availability Zone được chỉ định khỏi DNS, vì vậy các truy vấn mới sẽ không được phân giải đến endpoint đó. Điều này ngăn các yêu cầu mới từ client được gửi đến node đó. Thứ hai, nó chỉ thị cho các node load balancer trong các Availability Zone khác không định tuyến yêu cầu đến các target trong Availability Zone bị sự cố. Cross-zone load balancing vẫn được sử dụng trong các Availability Zone còn lại trong suốt quá trình zonal shift, như hình dưới đây.\nSau khi sự cố được giải quyết và ứng dụng hoạt động trở lại trong tất cả các Availability Zone, nhóm CommSec hủy zonal shift, và lưu lượng được phân phối lại trên cả ba Availability Zone.\nLợi ích của ARC zonal shift ARC zonal shift giúp các tổ chức duy trì SLA về tính khả dụng cao hơn, giảm chi phí vận hành liên quan đến các quy trình chuyển đổi dự phòng thủ công nhiều bước, và giảm thiểu thất thoát doanh thu do gián đoạn dịch vụ. Tính đơn giản của ARC zonal shift giúp các nhóm có thể thực hiện thường xuyên các bài kiểm thử quy trình di tản Availability Zone theo yêu cầu, với mức rủi ro thấp. Khả năng thực hiện xác thực định kỳ đảm bảo các quy trình failover vẫn đáng tin cậy và xây dựng sự tự tin của tổ chức trong khả năng khôi phục sau thảm họa.\n“ARC zonal shift là cách hiệu quả nhất để CommSec sử dụng các dịch vụ AWS trong khi vẫn đáp ứng yêu cầu về khả năng chịu lỗi. Nó mang lại một giải pháp sẵn có, dễ dàng hơn so với việc tự chúng tôi triển khai một giải pháp khôi phục Availability Zone. Hy vọng rằng chúng tôi sẽ không bao giờ phải dùng đến nó, nhưng việc kiểm thử định kỳ khả năng chịu lỗi đảm bảo rằng nó luôn sẵn sàng và sẽ hoạt động nếu chúng tôi cần.”\n– Henry Zhao, Kỹ sư phần mềm tại CommBank.\nKết luận Bằng việc sử dụng các dịch vụ AWS và triển khai kiến trúc Multi-AZ mạnh mẽ, nền tảng giao dịch của CommSec tiếp tục đáp ứng những nhu cầu khắt khe của nhà môi giới trực tuyến hàng đầu tại Úc. Sự kết hợp giữa các khả năng của ARC zonal shift, cấu hình load balancer được tối ưu hóa, cùng với các runbook và quy trình vận hành toàn diện đã giúp CommSec duy trì độ tin cậy vượt trội trong khi phục vụ hàng triệu khách hàng. Hành trình của CommSec cho thấy cách mà những quyết định kiến trúc thận trọng và các dịch vụ được quản lý bởi AWS có thể giúp các tổ chức đạt được cả vận hành xuất sắc lẫn trải nghiệm khách hàng vượt trội cho những ứng dụng tài chính quan trọng.\nĐể tìm hiểu thêm, hãy tham khảo AWS Fault Isolation Boundaries và Amazon Application Recovery Controller.\nLink bài viết gốc: (https://aws.amazon.com/blogs/architecture/how-commbank-made-their-commsec-trading-platform-highly-available-and-operationally-resilient/)",
    "description": "Cách CommBank xây dựng nền tảng giao dịch CommSec có độ sẵn sàng cao và vận hành bền vững Kris Severijns, Aaron Bull, Henry Zhao, và Terence Lum – 19/08/2025\nCommSec, công ty môi giới chứng khoán trực tuyến hàng đầu tại Úc và là công ty con của Commonwealth Bank of Australia (CommBank), hỗ trợ hàng triệu khách hàng gia tăng tài sản thông qua việc đầu tư dễ dàng, tiện lợi và chi phí hợp lý vào cả thị trường trong nước lẫn quốc tế.",
    "tags": [],
    "title": "Blog 3",
    "uri": "/en/3-translated_blogs/blog_3/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Week 4 Objectives Workshop Project: Planning \u0026 Analysis (Define architecture, workload) Search and start creating architecture diagram Set up environment, workspace Define tasks of team members Translate several blogs Update worklog Tasks to be carried out this week Day Task Start Date Completion Date Reference Material 1 - Team meeting to discuss about the architecture, necessary services of the workshop project 29/09/2025 29/09/2025 - Do reasearch about solutions for the architecture of the application Creating a Multi-Region Application with AWS Services – Part 1, Compute, Networking, and Security - Translate blog 5 Translated Blog 5 2 - Start creating the architecture diagram from the beginning 30/09/2025 30/09/2025 - Translate blog 6 Translated Blog 5 3 - Continue searching for sample solutions and apply to the architecture of the project 01/09/2025 01/09/2025 Deploy Stable Diffusion ComfyUI on AWS elastically and efficiently, Converting stateful application to stateless using AWS services 4 - Learn and practice using Route 53 02/09/2025 02/09/2025 Amazon Route 53 Basics Tutorial - Domain Registration, A Records, CNAME Records, Aliases, Subdomains - Continue searching for sample solutions and apply to the architecture of the project How UNiDAYS achieved AWS Region expansion in 3 weeks 5 - Translate blog 5 03/09/2025 03/09/2025 Translated Blog 5 - Update workshop proposal Proposal",
    "description": "Week 4 Objectives Workshop Project: Planning \u0026 Analysis (Define architecture, workload) Search and start creating architecture diagram Set up environment, workspace Define tasks of team members Translate several blogs Update worklog Tasks to be carried out this week Day Task Start Date Completion Date Reference Material 1 - Team meeting to discuss about the architecture, necessary services of the workshop project 29/09/2025 29/09/2025 - Do reasearch about solutions for the architecture of the application Creating a Multi-Region Application with AWS Services – Part 1, Compute, Networking, and Security - Translate blog 5 Translated Blog 5 2 - Start creating the architecture diagram from the beginning 30/09/2025 30/09/2025 - Translate blog 6 Translated Blog 5 3 - Continue searching for sample solutions and apply to the architecture of the project 01/09/2025 01/09/2025 Deploy Stable Diffusion ComfyUI on AWS elastically and efficiently, Converting stateful application to stateless using AWS services 4 - Learn and practice using Route 53 02/09/2025 02/09/2025 Amazon Route 53 Basics Tutorial - Domain Registration, A Records, CNAME Records, Aliases, Subdomains - Continue searching for sample solutions and apply to the architecture of the project How UNiDAYS achieved AWS Region expansion in 3 weeks 5 - Translate blog 5 03/09/2025 03/09/2025 Translated Blog 5 - Update workshop proposal Proposal",
    "tags": [],
    "title": "Week 4 Worklog",
    "uri": "/en/1-worklog/1.4-week_4/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Translated Blogs",
    "content": "BLOG 4",
    "description": "BLOG 4",
    "tags": [],
    "title": "Blog 4",
    "uri": "/en/3-translated_blogs/blog_4/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Week 5",
    "uri": "/en/1-worklog/1.5-week_5/index.html"
  },
  {
    "breadcrumb": "Internship Report",
    "content": "Blog 1: Hồ sơ quyết định kiến trúc (ADR): Thực tiễn tốt nhất để ra quyết định hiệu quả (12/09/2025 - W1)\nBlog 2: Định tuyến động sử dụng Máy chủ định tuyến AWS VPC (14/09/2025 - W1)\nBlog 3: Cách CommBank xây dựng nền tảng giao dịch CommSec luôn sẵn sàng và có khả năng vận hành bền vững.(18/09/2025 - W2)\nBlog 4: Doing task C…\nBlog 5: Xây dựng Ứng dụng Đa Vùng với Các Dịch vụ AWS – Phần 1: Tính toán, Mạng và Bảo mật (29/09/2025 - W4)\nWeek 6: Xây dựng Ứng Dụng Đa Vùng với Các Dịch vụ AWS – Phần 2: Dữ Liệu và Sao Chép(30/09/2025 - W4)\nWeek 7: Xây dựng Ứng Dụng Đa Vùng với Các Dịch vụ AWS – Phần 3: Quản lý và Giám sát Ứng dụng(30/09/2025 - W4)\nWeek 8: Doing task G…\nWeek 9: Doing task H…\nWeek 10: Doing task I…\nWeek 11: Doing task J…\nWeek 12: Doing task K…",
    "description": "Blog 1: Hồ sơ quyết định kiến trúc (ADR): Thực tiễn tốt nhất để ra quyết định hiệu quả (12/09/2025 - W1)\nBlog 2: Định tuyến động sử dụng Máy chủ định tuyến AWS VPC (14/09/2025 - W1)\nBlog 3: Cách CommBank xây dựng nền tảng giao dịch CommSec luôn sẵn sàng và có khả năng vận hành bền vững.(18/09/2025 - W2)\nBlog 4: Doing task C…\nBlog 5: Xây dựng Ứng dụng Đa Vùng với Các Dịch vụ AWS – Phần 1: Tính toán, Mạng và Bảo mật (29/09/2025 - W4)",
    "tags": [],
    "title": "Translated Blogs",
    "uri": "/en/3-translated_blogs/index.html"
  },
  {
    "breadcrumb": "Internship Report",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Events Participated",
    "uri": "/en/4-events-participated/index.html"
  },
  {
    "breadcrumb": "Internship Report",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Workshop",
    "uri": "/en/5-workshop/index.html"
  },
  {
    "breadcrumb": "Internship Report",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Self Assesment",
    "uri": "/en/6-self-assesment/index.html"
  },
  {
    "breadcrumb": "Internship Report",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Sharing and Feedback",
    "uri": "/en/7-sharing-and-feedback/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Translated Blogs",
    "content": "Xây dựng Ứng dụng Đa Vùng với Các Dịch vụ AWS – Phần 1: Tính toán, Mạng và Bảo mật Tác giả: Joe Chapman và Sebastian Leks - 08/12/2021\nChủ đề: Amazon CloudFront, Amazon EC2, Amazon Elastic Block Store (Amazon EBS), Amazon Route 53, Amazon Simple Storage Service (S3), Amazon VPC, Architecture, AWS CloudTrail, AWS Global Accelerator, AWS Identity and Access Management (IAM), AWS Secrets Manager, AWS Security Hub, AWS Transit Gateway, AWS Well-Architected Permalink Share\nNhiều dịch vụ AWS có các tính năng giúp bạn xây dựng và quản lý kiến trúc đa vùng (multi-Region), nhưng việc xác định những khả năng này trong hơn 200 dịch vụ có thể là một thách thức lớn.\nTrong loạt blog gồm 3 phần này, chúng tôi sẽ chọn lọc từ hơn 200 dịch vụ đó và tập trung vào những dịch vụ có tính năng cụ thể hỗ trợ bạn xây dựng ứng dụng đa vùng. Trong Phần 1, chúng ta sẽ xây dựng nền tảng với các dịch vụ bảo mật, mạng, và tính toán của AWS. Ở Phần 2, chúng ta sẽ bổ sung các chiến lược dữ liệu và sao chép. Cuối cùng, trong Phần 3, chúng ta sẽ tìm hiểu về lớp ứng dụng và quản lý. Khi đi qua từng phần, chúng ta sẽ dần xây dựng một ứng dụng mẫu để minh họa cách kết hợp các dịch vụ này nhằm tạo ra một ứng dụng đa vùng.\nNhững điều cần cân nhắc trước khi bắt đầu Các AWS Region được xây dựng với nhiều Availability Zone (AZ) tách biệt và cách ly về mặt vật lý. Cách tiếp cận này cho phép bạn tạo ra các workload có độ sẵn sàng cao, tuân thủ nguyên tắc Well-Architected, trải rộng trên nhiều AZ để đạt được khả năng chịu lỗi tốt hơn. Điều này đáp ứng được mục tiêu khả dụng cho hầu hết các ứng dụng, nhưng vẫn có một số lý do chung khiến bạn có thể muốn mở rộng ra ngoài một Region duy nhất:\nMở rộng ra khán giả toàn cầu: khi ứng dụng phát triển và lượng người dùng trở nên phân tán về mặt địa lý, có thể sẽ cần giảm độ trễ cho các khu vực khác nhau trên thế giới.\nGiảm RPO (Recovery Point Objective) và RTO (Recovery Time Objective): như một phần của kế hoạch khắc phục thảm họa (Disaster Recovery – DR) đa vùng.\nLuật pháp và quy định địa phương: có thể có những yêu cầu nghiêm ngặt về lưu trú dữ liệu (data residency) và quyền riêng tư mà bạn buộc phải tuân thủ.\nNếu bạn đang xây dựng một ứng dụng đa vùng mới, bạn nên cân nhắc tập trung vào các dịch vụ AWS có sẵn chức năng hỗ trợ. Với những ứng dụng hiện có, cần phải xem xét kỹ hơn để xác định kiến trúc nào có khả năng mở rộng nhất nhằm đáp ứng sự phát triển. Các phần tiếp theo sẽ xem xét những dịch vụ này, đồng thời nêu bật các trường hợp sử dụng và thực tiễn tốt nhất.\nQuản lý danh tính và truy cập trên nhiều Region Xây dựng nền tảng bảo mật bắt đầu từ việc thiết lập các quy tắc xác thực (authentication) và phân quyền (authorization) phù hợp. Hệ thống xử lý các yêu cầu này phải có khả năng chịu lỗi cao để xác minh và cấp quyền nhanh chóng, đáng tin cậy. AWS Identity and Access Management (IAM) đáp ứng điều này bằng cách cung cấp một cơ chế đáng tin cậy để bạn quản lý quyền truy cập vào các dịch vụ và tài nguyên AWS. IAM có khả năng sẵn sàng trên nhiều Region một cách tự động, mà bạn không cần phải cấu hình gì thêm.\nĐể hỗ trợ quản lý người dùng Windows, thiết bị và ứng dụng trong một mạng đa vùng, bạn có thể thiết lập AWS Directory Service for Microsoft Active Directory Enterprise Edition, dịch vụ này sẽ tự động sao chép dữ liệu thư mục giữa các Region. Điều này giúp giảm độ trễ khi tra cứu thư mục bằng cách sử dụng thư mục gần nhất, đồng thời tăng tính bền vững bằng cách trải rộng trên nhiều Region. Lưu ý rằng điều này cũng kéo theo “số phận chung” giữa các domain controller trong kiến trúc đa vùng, vì các thay đổi group policy sẽ được lan truyền đến tất cả các máy chủ thành viên.\nCác ứng dụng cần lưu trữ, luân chuyển và kiểm toán bí mật một cách an toàn, chẳng hạn như mật khẩu cơ sở dữ liệu, nên sử dụng AWS Secrets Manager. Dịch vụ này mã hóa các bí mật bằng khóa của AWS Key Management Service (AWS KMS) và có thể sao chép các bí mật sang Region thứ cấp để đảm bảo ứng dụng có thể nhanh chóng lấy được bí mật từ Region gần nhất.\nMã hóa trên nhiều Region AWS KMS có thể được sử dụng để mã hóa dữ liệu khi lưu trữ (data at rest) và được dùng rộng rãi cho việc mã hóa trên các dịch vụ AWS. Theo mặc định, các khóa chỉ giới hạn trong một Region. Những dịch vụ AWS như Amazon Simple Storage Service (Amazon S3) cross-Region replication và Amazon Aurora Global Database (sẽ được đề cập trong phần 2) giúp đơn giản hóa quá trình mã hóa và giải mã bằng các khóa khác nhau ở từng Region.\nĐối với các phần khác trong ứng dụng đa vùng của bạn phụ thuộc vào khóa KMS, bạn có thể thiết lập AWS KMS multi-Region keys để sao chép cả key material và key ID sang Region thứ hai. Điều này loại bỏ nhu cầu giải mã rồi mã hóa lại dữ liệu với một khóa khác ở từng Region. Ví dụ, multi-Region keys có thể được dùng để giảm độ phức tạp trong các hoạt động mã hóa của ứng dụng đa vùng cho dữ liệu được lưu trữ trên nhiều Region.\nKiểm toán và khả năng quan sát trên nhiều Region Một thực tiễn tốt nhất là cấu hình AWS CloudTrail để lưu lại toàn bộ hoạt động AWS API liên quan trong tài khoản của bạn nhằm phục vụ mục đích kiểm toán. Khi bạn sử dụng nhiều Region hoặc nhiều tài khoản, các log CloudTrail này nên được tập hợp về một bucket Amazon S3 duy nhất để thuận tiện cho việc phân tích. Để ngăn chặn việc sử dụng sai mục đích, các log tập trung này cần được coi là dữ liệu nhạy cảm hơn, chỉ cấp quyền truy cập cho các hệ thống và nhân sự chủ chốt.\nĐể theo dõi các phát hiện từ AWS Security Hub, bạn có thể tổng hợp và liên kết các phát hiện từ nhiều vị trí về một Region duy nhất. Đây là cách đơn giản để tạo một cái nhìn tập trung về các phát hiện của Security Hub trên nhiều tài khoản và nhiều Region. Sau khi thiết lập, các phát hiện sẽ liên tục được đồng bộ giữa các Region để giúp bạn luôn nắm được kết quả toàn cầu trên một bảng điều khiển duy nhất.\nChúng tôi đã kết hợp những tính năng này trong Hình 1. Chúng tôi sử dụng IAM để cấp quyền truy cập chi tiết đến các dịch vụ và tài nguyên AWS, Directory Service for Microsoft AD để xác thực người dùng trong các ứng dụng Microsoft, và Secrets Manager để lưu trữ thông tin đăng nhập cơ sở dữ liệu nhạy cảm. Dữ liệu của chúng tôi, di chuyển tự do giữa các Region, được mã hóa bằng KMS multi-Region keys, và toàn bộ hoạt động truy cập AWS API được ghi lại bởi CloudTrail, sau đó tập trung vào một bucket S3 trung tâm mà chỉ nhóm bảo mật của chúng tôi mới có quyền truy cập.\nHình 1. Các dịch vụ bảo mật, danh tính và tuân thủ đa vùng\rXây dựng mạng toàn cầu Đối với các tài nguyên được triển khai trong các mạng ảo ở những Region khác nhau, Amazon Virtual Private Cloud (Amazon VPC) cho phép định tuyến riêng tư giữa các Region và tài khoản bằng VPC peering. Các tài nguyên này có thể giao tiếp với nhau bằng địa chỉ IP riêng mà không cần internet gateway, VPN, hoặc thiết bị mạng riêng biệt. Tính năng này hoạt động tốt cho các mạng nhỏ chỉ cần một vài kết nối peering. Tuy nhiên, định tuyến bắc cầu (transitive routing) không được hỗ trợ, và khi số lượng VPC peering tăng lên, cấu trúc mạng dạng mesh có thể trở nên khó quản lý và khắc phục sự cố.\nAWS Transit Gateway giúp giảm bớt những khó khăn này bằng cách tạo một hub trung chuyển mạng, kết nối các VPC và mạng tại chỗ (on-premises). Khả năng định tuyến của Transit Gateway có thể mở rộng sang các Region khác thông qua Transit Gateway inter-Region peering, để tạo ra một mạng riêng tư phân tán toàn cầu cho tài nguyên của bạn.\nXây dựng một cách định tuyến đáng tin cậy và tiết kiệm chi phí để đưa người dùng đến các ứng dụng internet phân tán đòi hỏi những bản ghi Domain Name System (DNS) có độ sẵn sàng cao và khả năng mở rộng tốt. Amazon Route 53 chính là dịch vụ làm được điều đó.\nRoute 53 có nhiều chính sách định tuyến khác nhau. Ví dụ, bạn có thể định tuyến một yêu cầu đến bản ghi có độ trễ mạng thấp nhất, hoặc đưa người dùng ở một vị trí địa lý cụ thể đến endpoint ứng dụng cục bộ. Đối với kịch bản khắc phục thảm họa (DR), Route 53 Application Recovery Controller (Route 53 ARC) cung cấp một giải pháp failover toàn diện với mức phụ thuộc tối thiểu. Các routing policy, safety check, và readiness check của Route 53 ARC giúp bạn thực hiện failover qua nhiều Region, AZ, và môi trường on-premises một cách đáng tin cậy.\nAmazon CloudFront – mạng phân phối nội dung (CDN) – là một dịch vụ toàn cầu, được xây dựng trên hơn 300 điểm hiện diện (PoP) khắp thế giới. Các ứng dụng có nhiều origin khả dụng (ví dụ như nhiều Region) có thể dùng CloudFront origin failover để tự động chuyển hướng sang origin dự phòng khi origin chính gặp sự cố. Khả năng của CloudFront không chỉ dừng lại ở việc phân phát nội dung, mà còn có thể chạy tính toán ở edge. CloudFront Functions giúp dễ dàng chạy các đoạn mã JavaScript nhẹ, trong khi AWS Lambda@Edge cho phép bạn chạy các hàm Node.js và Python gần hơn với người dùng ứng dụng, từ đó cải thiện hiệu năng và giảm độ trễ. Việc đưa compute ra edge giúp giảm tải cho origin và mang lại phản hồi nhanh hơn cho người dùng toàn cầu.\nĐược xây dựng trên mạng lưới toàn cầu của AWS, AWS Global Accelerator cung cấp hai địa chỉ IP anycast tĩnh để làm điểm truy cập duy nhất cho các ứng dụng hướng internet. Bạn có thể linh hoạt thêm hoặc xóa origin trong khi hệ thống vẫn tự động định tuyến lưu lượng đến endpoint khu vực khỏe mạnh gần nhất. Nếu phát hiện lỗi, Global Accelerator sẽ tự động chuyển hướng lưu lượng đến một endpoint khả dụng chỉ trong vài giây, mà không cần thay đổi địa chỉ IP tĩnh.\nHình 2 minh họa việc sử dụng Route 53 latency-based routing policy để định tuyến người dùng đến endpoint nhanh nhất, CloudFront để phân phát nội dung tĩnh như video và hình ảnh, và Transit Gateway để tạo một mạng riêng toàn cầu, giúp các thiết bị của chúng tôi có thể giao tiếp an toàn trên nhiều Region.\nHình 2. Kết nối AWS VPC và phân phối nội dung\rXây dựng và quản lý lớp tính toán (compute layer) Mặc dù Amazon Elastic Compute Cloud (Amazon EC2) và các Amazon Elastic Block Store (Amazon EBS) volume liên kết chỉ tồn tại trong một AZ, Amazon Data Lifecycle Manager có thể tự động hóa quá trình tạo và sao chép snapshot EBS giữa các Region. Điều này giúp nâng cao chiến lược khắc phục thảm họa (DR) bằng cách cung cấp một lựa chọn sao lưu và khôi phục lạnh (cold backup-and-restore) đơn giản cho các volume EBS. Nếu bạn cần sao lưu nhiều hơn chỉ các EBS volume, AWS Backup cung cấp một nơi tập trung để thực hiện việc này trên nhiều dịch vụ (sẽ được đề cập trong phần 2).\nMột EC2 instance được xây dựng dựa trên một Amazon Machine Image (AMI). AMI xác định cấu hình của instance như lưu trữ, quyền khởi chạy, và ánh xạ thiết bị. Khi cần tạo và phát hành một image chuẩn mới, EC2 Image Builder giúp đơn giản hóa quá trình xây dựng, kiểm thử, và triển khai AMI mới. Nó cũng hỗ trợ sao chép AMI sang các Region bổ sung, loại bỏ việc phải sao chép thủ công AMI nguồn sang các Region đích.\nCác ứng dụng dựa trên microservice sử dụng container sẽ hưởng lợi từ thời gian khởi động nhanh hơn. Amazon Elastic Container Registry (Amazon ECR) có thể đảm bảo điều này diễn ra nhất quán trên nhiều Region bằng cách sao chép image riêng tư ở cấp độ registry. Một ECR private registry có thể được cấu hình cho cả cross-Region hoặc cross-account replication, để đảm bảo image của bạn luôn sẵn sàng ở các Region thứ cấp khi cần.\nKhi kiến trúc mở rộng ra nhiều Region, việc theo dõi tài nguyên được cấp phát ở đâu có thể trở nên khó khăn. Amazon EC2 Global View giúp giảm bớt vấn đề này bằng cách cung cấp một bảng điều khiển tập trung, hiển thị các tài nguyên EC2 như instance, VPC, subnet, security group, và volume trong tất cả các Region đang hoạt động.\nChúng tôi kết hợp các tính năng compute layer này trong Hình 3 bằng cách sử dụng EC2 Image Builder để sao chép AMI chuẩn mới nhất của chúng tôi sang nhiều Region để triển khai. Chúng tôi cũng sao lưu mỗi EBS volume trong 3 ngày và sao chép nó sang nhiều Region bằng Data Lifecycle Manager.\nHình 3. Sao chép AMI và ảnh chụp nhanh EBS giữa các Vùng (Regions)\rĐưa tất cả lại với nhau Ở cuối mỗi phần của loạt bài blog này, chúng tôi sẽ xây dựng một ứng dụng mẫu dựa trên các dịch vụ đã đề cập. Điều này cho thấy cách bạn có thể kết hợp các dịch vụ để xây dựng một ứng dụng đa Vùng (multi-Region) với AWS. Chúng tôi không sử dụng tất cả dịch vụ được nhắc đến, chỉ chọn những dịch vụ phù hợp với trường hợp sử dụng.\nChúng tôi xây dựng ví dụ này để mở rộng đến phạm vi toàn cầu. Ứng dụng yêu cầu tính sẵn sàng cao giữa các Vùng, và ưu tiên hiệu năng hơn là tính nhất quán tuyệt đối. Chúng tôi đã chọn các dịch vụ sau (trong bài viết này) để đạt được mục tiêu:\nRoute 53 với chính sách định tuyến theo độ trễ (latency routing) để đưa người dùng đến vùng triển khai có độ trễ thấp nhất.\nCloudFront được thiết lập để phân phối nội dung tĩnh. Region 1 là nguồn gốc chính, nhưng chúng tôi đã cấu hình dự phòng nguồn gốc (origin failover) sang Region 2 trong trường hợp có sự cố.\nỨng dụng phụ thuộc vào một số API của bên thứ ba, vì vậy Secrets Manager với khả năng sao chép đa Vùng đã được thiết lập để lưu trữ thông tin khóa API nhạy cảm.\nCloudTrail logs được tập trung tại Region 1 để dễ dàng phân tích và kiểm toán.\nSecurity Hub tại Region 1 được chọn làm nơi tập hợp các phát hiện từ tất cả các Vùng.\nĐây là ứng dụng dựa trên container, chúng tôi dựa vào Amazon ECR replication tại mỗi vị trí để nhanh chóng tải về các image mới nhất tại chỗ.\nĐể liên lạc qua IP riêng giữa các Vùng, một Transit Gateway được thiết lập tại mỗi Vùng với kết nối liên Vùng. VPC peering cũng có thể hoạt động, nhưng vì dự kiến mở rộng ra nhiều Vùng hơn trong tương lai nên chúng tôi chọn Transit Gateway như giải pháp lâu dài.\nIAM được dùng để cấp quyền quản lý tài nguyên AWS.\nHình 4. Xây dựng ứng dụng với các dịch vụ AWS đa Vùng, sử dụng những dịch vụ đã đề cập trong Phần 1\rTóm tắt Khi thiết kế một ứng dụng đa Vùng (multi-Region), việc xây dựng một nền tảng vững chắc là vô cùng quan trọng. Nền tảng này sẽ giúp bạn phát triển ứng dụng nhanh chóng theo cách an toàn, đáng tin cậy và linh hoạt. Nhiều dịch vụ AWS đã tích hợp sẵn các tính năng hỗ trợ bạn xây dựng kiến trúc đa Vùng.\nTùy vào lý do mở rộng ra ngoài một Vùng duy nhất mà kiến trúc của bạn sẽ khác nhau. Trong bài viết này, chúng tôi đã đề cập đến các tính năng cụ thể của những dịch vụ AWS về bảo mật, mạng và tính toán (compute) — với khả năng tích hợp sẵn để giảm bớt khối lượng công việc nặng nề và lặp lại.\nTrong các bài viết tiếp theo, chúng tôi sẽ tiếp tục đề cập đến các dịch vụ về dữ liệu, ứng dụng và quản lý.\n*** Sẵn sàng để bắt đầu? *** Chúng tôi đã chọn một số AWS Solutions và AWS Blogs để hỗ trợ bạn!\n*** Bạn đang tìm thêm nội dung về kiến trúc? *** AWS Architecture Center cung cấp sơ đồ kiến trúc tham chiếu, các giải pháp kiến trúc đã được kiểm chứng, những thực tiễn tốt nhất theo Well-Architected, các mẫu (patterns), biểu tượng và nhiều hơn nữa!\nLink bài viết gốc: (https://aws.amazon.com/blogs/architecture/creating-a-multi-region-application-with-aws-services-part-1-compute-and-security/)\nCác bài viết khác trong chuỗi này:\nXây dựng Ứng Dụng Đa Vùng với Các Dịch vụ AWS – Phần 2: Dữ Liệu và Sao Chép\nXây dựng Ứng Dụng Đa Vùng với Các Dịch vụ AWS – Phần 3: Quản lý và Giám sát Ứng dụng",
    "description": "Xây dựng Ứng dụng Đa Vùng với Các Dịch vụ AWS – Phần 1: Tính toán, Mạng và Bảo mật Tác giả: Joe Chapman và Sebastian Leks - 08/12/2021\nChủ đề: Amazon CloudFront, Amazon EC2, Amazon Elastic Block Store (Amazon EBS), Amazon Route 53, Amazon Simple Storage Service (S3), Amazon VPC, Architecture, AWS CloudTrail, AWS Global Accelerator, AWS Identity and Access Management (IAM), AWS Secrets Manager, AWS Security Hub, AWS Transit Gateway, AWS Well-Architected Permalink Share\nNhiều dịch vụ AWS có các tính năng giúp bạn xây dựng và quản lý kiến trúc đa vùng (multi-Region), nhưng việc xác định những khả năng này trong hơn 200 dịch vụ có thể là một thách thức lớn.",
    "tags": [],
    "title": "Blog 5",
    "uri": "/en/3-translated_blogs/blog_5/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Week 6",
    "uri": "/en/1-worklog/1.6-week_6/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Translated Blogs",
    "content": "Xây dựng Ứng Dụng Đa Vùng với Các Dịch vụ AWS – Phần 2: Dữ Liệu và Sao Chép Tác giả: Joe Chapman và Sebastian Leks - 12/01/2022\nChủ đề: Amazon Aurora, Amazon DocumentDB, Amazon DynamoDB, Amazon ElastiCache, Amazon RDS, Amazon Redshift, Amazon Simple Storage Service (S3), Architecture, AWS Backup, AWS DataSync, AWS Global Accelerator\nDữ liệu là trung tâm của các ứng dụng có trạng thái (stateful applications). Mô hình nhất quán dữ liệu sẽ khác nhau khi lựa chọn triển khai trong một Region hay nhiều Region. Trong bài viết này, phần 2/3, chúng ta sẽ tiếp tục chọn lọc các dịch vụ AWS, tập trung vào những dịch vụ hướng dữ liệu với các tính năng gốc (native features) giúp đưa dữ liệu đến đúng nơi cần thiết để hỗ trợ chiến lược đa vùng cho ứng dụng của bạn.\nỞ Phần 1 của loạt blog này, chúng ta đã xem xét cách sử dụng các dịch vụ tính toán (compute), mạng (networking), và bảo mật (security) của AWS để xây dựng nền tảng cho một ứng dụng multi-Region. Ở Phần 3, chúng ta sẽ tìm hiểu các dịch vụ quản lý và giám sát ứng dụng của AWS, giúp bạn xây dựng, theo dõi và duy trì ứng dụng multi-Region.\nNhững lưu ý khi sao chép dữ liệu Việc sao chép dữ liệu trên mạng AWS diễn ra rất nhanh, nhưng bạn cần nhớ rằng thời gian di chuyển của gói tin sẽ tăng lên theo khoảng cách vật lý mà gói tin cần đi qua. Vì lý do này, khi xây dựng ứng dụng multi-Region, bạn phải cân nhắc giữa tính nhất quán dữ liệu và hiệu năng. Khi xây dựng một hệ thống phân tán, cần xem xét định lý CAP (Consistency, Availability, Partition Tolerance). Định lý này chỉ ra rằng một ứng dụng chỉ có thể đạt được 2 trong 3 yếu tố, và bạn phải chấp nhận đánh đổi khi đưa ra lựa chọn:\nConsistency (Nhất quán) – tất cả các client luôn thấy cùng một trạng thái dữ liệu\nAvailability (Sẵn sàng) – tất cả các client luôn có thể đọc và ghi dữ liệu\nPartition Tolerance (Chịu lỗi phân mảnh mạng) – hệ thống vẫn hoạt động ngay cả khi có sự cố phân mảnh vật lý trong mạng\nTrong các kiến trúc single-Region, việc đạt được Consistency và Availability (CA) là điều thường thấy. Ví dụ: khi một ứng dụng chỉ kết nối đến một cơ sở dữ liệu quan hệ trong cùng một Region.\nTuy nhiên, với multi-Region applications, điều này trở nên khó khăn hơn vì độ trễ phát sinh do việc truyền dữ liệu qua khoảng cách địa lý xa. Vì thế, các hệ thống phân tán ở mức toàn cầu thường chấp nhận hy sinh tính nhất quán tuyệt đối, thay vào đó ưu tiên Availability và Partition Tolerance (AP). Mô hình này thường được gọi là eventual consistency (nhất quán cuối cùng).\nSao chép đối tượng và tệp tin Quy mô, độ bền và tính sẵn sàng của Amazon Simple Storage Service (Amazon S3) khiến nó trở thành một điểm đến tuyệt vời để lưu trữ nhiều loại tài nguyên cho ứng dụng của bạn. Để cho phép ứng dụng truy cập nhanh dữ liệu này bất kể được triển khai ở Region nào, bạn có thể thiết lập Amazon S3 để sao chép dữ liệu giữa các Region AWS với cơ chế sao chép một chiều hoặc hai chiều liên tục. Nếu ứng dụng của bạn không cần tất cả các đối tượng trong một bucket để hoạt động tối ưu, một tập con đối tượng có thể được sao chép bằng các quy tắc replication của Amazon S3. Amazon S3 trong một Region cung cấp tính nhất quán mạnh khi đọc ngay sau khi ghi; tuy nhiên, các đối tượng đã được sao chép sẽ chỉ nhất quán sau một khoảng thời gian ở các Region đích. Nếu việc duy trì độ trễ sao chép thấp là quan trọng, S3 Replication Time Control sẽ sao chép 99,99% đối tượng trong vòng 15 phút, và hầu hết chỉ mất vài giây. Quan sát là yếu tố then chốt ở mọi lớp của một ứng dụng, và bạn có thể giám sát trạng thái sao chép của các đối tượng bằng Amazon S3 events và metrics.\nMỗi bucket S3 được cấp endpoint riêng theo Region, điều này có nghĩa là endpoint bao gồm Region của bucket trong URL, ví dụ:\nhttps://\u003cMY-BUCKET\u003e.s3.\u003cAWS-REGION\u003e.amazonaws.com/\rĐể đơn giản hóa việc kết nối đến và quản lý nhiều endpoint bucket, Amazon S3 Multi-Region Access Points tạo ra một endpoint toàn cầu duy nhất bao phủ nhiều bucket S3 ở các Region khác nhau. Khi ứng dụng kết nối đến endpoint này, các yêu cầu sẽ được định tuyến qua mạng AWS bằng AWS Global Accelerator đến bucket có độ trễ thấp nhất. Việc định tuyến dự phòng cũng được xử lý tự động nếu khả năng sẵn sàng của một bucket thay đổi. Bạn sẽ thấy rằng các endpoint này không phụ thuộc Region trong URL:\nhttps://\u003cRANDOM-STRING\u003e.mrap.s3-global.amazonaws.com/\rNếu một số phần của ứng dụng bạn chưa hỗ trợ đọc và ghi vào object store trên nền web như Amazon S3, bạn có thể có cùng độ bền và tính sẵn sàng trên một hệ thống tệp chia sẻ với các lớp lưu trữ theo Region của Amazon Elastic File System (Amazon EFS). Để đảm bảo các triển khai ứng dụng đa Region có thể truy cập dữ liệu này tại chỗ, bạn có thể thiết lập replication dựa trên block của Amazon EFS đến một volume EFS chỉ đọc ở Region khác.\nĐối với các tệp được lưu bên ngoài Amazon S3 và Amazon EFS, AWS DataSync đơn giản hóa, tự động hóa và tăng tốc việc di chuyển dữ liệu giữa các Region và account. Nó hỗ trợ cả di chuyển đồng nhất và khác loại giữa Amazon FSx, AWS Snowcone, Amazon EFS, và Amazon S3. Nó thậm chí có thể được dùng để đồng bộ các tệp on-premises được lưu trữ trên NFS, SMB, HDFS và object storage tự quản lý lên AWS cho các kiến trúc hybrid.\nViệc sao chép tệp và đối tượng được kỳ vọng là sẽ nhất quán sau một khoảng thời gian. Tốc độ mà một tập dữ liệu có thể truyền tải phụ thuộc vào dung lượng dữ liệu, băng thông I/O, băng thông mạng, điều kiện mạng và khoảng cách vật lý.\nSao chép bản sao lưu Bên cạnh việc sao chép dữ liệu (replication), bạn cũng nên sao lưu dữ liệu của mình. Trong trường hợp dữ liệu bị hỏng hoặc vô tình bị xóa, một bản sao lưu sẽ cho phép bạn khôi phục về trạng thái tốt cuối cùng đã biết. Ngoài ra, không phải tất cả dữ liệu đều cần được sao chép theo thời gian thực. Ví dụ, nếu bạn đang thiết kế cho kịch bản khôi phục thảm họa và ứng dụng của bạn có RTO (Recovery Time Objective – Mục tiêu thời gian khôi phục) và RPO (Recovery Point Objective – Mục tiêu điểm khôi phục) dài hơn, thì việc sao chép bản sao lưu theo lịch trình có thể đáp ứng yêu cầu của bạn trong khi lại tiết kiệm chi phí hơn. Đối với những trường hợp này, AWS Backup có thể tự động hóa việc sao lưu dữ liệu của bạn để đáp ứng yêu cầu kinh doanh, và các bản sao lưu này có thể được cấu hình để tự động sao chép đến một hoặc nhiều Region hoặc account AWS. Thời gian sao chép phụ thuộc vào kích thước bản sao lưu của bạn và khoảng cách cần truyền tải. Bạn nên chạy thử nghiệm trước để xác định xem thời gian sao chép xuyên Region này có ảnh hưởng đến RTO và RPO đã định nghĩa của bạn hay không. Ngày càng có nhiều dịch vụ được hỗ trợ, và điều này đặc biệt hữu ích cho các dịch vụ không cung cấp tính năng sao chép theo thời gian thực sang Region khác như Amazon Elastic Compute Cloud (Amazon EC2) hoặc Amazon Neptune.\nHình 1 cho thấy cách các dịch vụ dữ liệu được đề cập có thể được kết hợp cho từng tài nguyên trong một kiến trúc. Chúng tôi sử dụng Amazon S3 bi-directional replication để giữ cho các đối tượng trong bucket được đồng bộ trong khi vẫn cho phép ghi từ bất kỳ Region nào. Các máy chủ ứng dụng dựa trên Amazon EC2 của chúng tôi có một mount Amazon EFS bao gồm các bản nhị phân ứng dụng mới nhất và các tệp hỗ trợ, và chúng tôi dựa vào replication của Amazon EFS để giữ dữ liệu này được đồng bộ trên các triển khai ở nhiều Region. Cuối cùng, chúng tôi sử dụng AWS Backup để tạo snapshot cho các instance EC2 của mình và lưu chúng dưới dạng AMI images trong Region thứ cấp.\nHình 1. Các dịch vụ sao lưu lưu trữ\rMở rộng cơ sở dữ liệu phi quan hệ trên nhiều Region Amazon DynamoDB global tables cung cấp khả năng đa Region và đa điểm ghi, giúp bạn xây dựng các ứng dụng toàn cầu ở quy mô lớn. DynamoDB global table là dịch vụ cơ sở dữ liệu do AWS quản lý duy nhất cho phép nhiều điểm ghi chủ động với khả năng phát hiện xung đột trong kiến trúc đa Region (active-active và multi-Region). Điều này cho phép ứng dụng đọc và ghi dữ liệu tại Region gần nhất, đồng thời các thay đổi sẽ tự động được sao chép sang các Region khác. Việc đọc toàn cầu và khôi phục nhanh cho Amazon DocumentDB (tương thích với MongoDB) có thể đạt được thông qua các global cluster. Các cluster này có một Region chính xử lý thao tác ghi. Hạ tầng sao chép dựa trên lưu trữ chuyên biệt giúp thực hiện đọc toàn cầu với độ trễ thường dưới một giây.\nGiữ bộ nhớ đệm trong RAM (in-memory cache) được đồng bộ dữ liệu trên nhiều Region là yếu tố quan trọng để duy trì hiệu năng ứng dụng. Amazon ElastiCache (Redis OSS) cung cấp global datastore để tạo một bản sao chéo Region được quản lý toàn diện, nhanh chóng, đáng tin cậy và an toàn cho Redis OSS caches và databases. Với global datastore, các thao tác ghi ở một Region có thể được đọc từ tối đa hai cluster bản sao ở Region khác – loại bỏ nhu cầu phải ghi vào nhiều cache để giữ chúng luôn “ấm”.\nMở rộng cơ sở dữ liệu quan hệ trên nhiều Region Đối với các ứng dụng cần mô hình dữ liệu quan hệ, Amazon Aurora global database hỗ trợ mở rộng khả năng đọc dữ liệu trên nhiều Region trong cả hai phiên bản tương thích Aurora PostgreSQL và MySQL. Hạ tầng sao chép chuyên biệt sử dụng cơ chế sao chép dựa trên lưu trữ vật lý, giúp duy trì độ trễ sao chép ổn định và thấp, vượt trội hơn so với các cơ chế sao chép logic tích hợp sẵn của các hệ quản trị cơ sở dữ liệu, như minh họa ở Hình 2.\nHình 2. SysBench OLTP (chỉ ghi) tăng dần mỗi 600 giây trên R4.16xlarge\rVới Aurora global database, một cluster ở một Region được chỉ định là writer, trong khi các Region phụ được dành cho việc đọc. Mặc dù chỉ có một instance duy nhất xử lý các thao tác ghi, Aurora MySQL hỗ trợ write forwarding, một tính năng sẽ chuyển các truy vấn ghi từ endpoint của Region phụ sang Region chính, giúp đơn giản hóa logic trong mã ứng dụng. Bạn có thể kiểm tra Regional failover bằng cách sử dụng managed planned failover của Aurora global database. Hành động này sẽ chuyển cluster ghi chủ động sang một Region phụ trong khi vẫn giữ nguyên kiến trúc sao chép. Cần lưu ý rằng hành động này phụ thuộc vào việc Aurora ở Region chính còn hoạt động, vì vậy hãy cân nhắc điều này trong kế hoạch khôi phục thảm họa. Nếu Aurora ở Region chính không khả dụng, bạn vẫn có thể promote bất kỳ cluster phụ nào của Aurora trong Aurora global database. Quá trình promotion được thực hiện từ Region phụ. Trong khoảng một phút, quá trình này sẽ loại cluster khỏi Aurora global database, kích hoạt endpoint ghi theo Region, và nâng một instance của cluster lên thành writer chủ động. Khi quá trình này hoàn tất, bạn sẽ cần cập nhật chuỗi kết nối cơ sở dữ liệu trong ứng dụng để kết nối với endpoint writer mới.\nTất cả các cơ sở dữ liệu được thảo luận trong bài viết này đều tuân theo mô hình eventual consistency khi sử dụng đa Region, nhưng các Aurora PostgreSQL–based global database có thêm tùy chọn để chỉ định maximum replica lag cho phép với managed recovery point objective (managed RPO.\nVề khả năng backup-and-restore, Aurora có thời gian lưu trữ bản sao tự động tối thiểu 1 ngày và tối đa 35 ngày cho tất cả các cluster, bao gồm cả cluster phụ toàn cầu. Điều này cho phép bạn khôi phục các cluster phụ về một điểm thời gian xác định trong Region đích nếu cần. Logical replication, sử dụng công nghệ sao chép tích hợp sẵn của engine cơ sở dữ liệu, có thể được thiết lập cho Amazon RDS cho MariaDB, MySQL, Oracle, PostgreSQL và Aurora. Một cross-Region read replica sẽ nhận và xử lý các thay đổi từ writer ở Region chính. Các replica này cho phép đọc cục bộ nhanh hơn và có thể giảm mất mát dữ liệu cũng như rút ngắn thời gian khôi phục trong trường hợp thảm họa bằng cách được nâng thành instance độc lập. Công nghệ logical replication cũng có thể được dùng để sao chép dữ liệu ra các tài nguyên bên ngoài Amazon RDS, như instance EC2, server on-premises hoặc thậm chí data lake.\nTrong những trường hợp RPO và RTO dài hơn vẫn chấp nhận được, các bản sao lưu có thể được sao chép giữa các Region. Điều này áp dụng cho tất cả cơ sở dữ liệu quan hệ và phi quan hệ được nhắc đến trong bài, ngoại trừ ElastiCache. Mặc dù Amazon Redshift không có tính năng sao chép cross-Region, bạn có thể thiết lập Amazon Redshift để tự động sao chép snapshot của kho dữ liệu sang Region khác. Thời gian sao chép bản sao lưu sẽ khác nhau tùy thuộc vào kích thước và tần suất thay đổi dữ liệu.\nKết hợp lại Ở cuối mỗi phần trong loạt blog này, chúng tôi xây dựng một ứng dụng mẫu dựa trên các dịch vụ đã đề cập. Điều này cho thấy cách kết hợp các dịch vụ lại với nhau để xây dựng một ứng dụng multi-Region bằng các dịch vụ AWS. Chúng tôi không sử dụng tất cả các dịch vụ được nhắc đến, chỉ những dịch vụ phù hợp với tình huống sử dụng.\nChúng tôi đã tạo ví dụ này để mở rộng ra đối tượng người dùng toàn cầu. Ứng dụng yêu cầu khả năng sẵn sàng cao trên nhiều Region và ưu tiên hiệu năng hơn là tính nhất quán tuyệt đối. Chúng tôi đã chọn những dịch vụ sau (trong số các dịch vụ đã đề cập ở phần này) để đạt được mục tiêu, dựa trên nền tảng từ phần 1:\nDynamoDB global tables để ứng dụng triển khai ở mỗi Region có thể vừa đọc vừa ghi vào cơ sở dữ liệu trong cùng Region.\nElastiCache Global Datastore làm tầng cache. Việc ghi vào global datastore chỉ diễn ra ở Region 1, nhưng điều này phù hợp với tình huống sử dụng vì ứng dụng dựa vào các mục cache tương tự bất kể Region nào.\nS3 bucket để lưu trữ dữ liệu ứng dụng, tệp cấu hình, nội dung tĩnh và dữ liệu do người dùng tải lên. Amazon S3 sao chép chéo 2 chiều giữa các Region để giữ cho các bucket đồng bộ. Cuối cùng, ứng dụng của chúng tôi sử dụng Amazon S3 multi-Region access point để đảm bảo các yêu cầu đến Amazon S3 được định tuyến đến Region có độ trễ thấp nhất và tự động xử lý failover.\nHình 3. Xây dựng ứng dụng với các dịch vụ AWS multi-Region, sử dụng những dịch vụ đã đề cập trong Phần 1\rMặc dù mục tiêu chính của chúng tôi là mở rộng ra đối tượng toàn cầu, chúng tôi lưu ý rằng một số cơ chế sao chép được thiết lập là một chiều, chẳng hạn như với ElastiCache Global Datastore. Mỗi triển khai theo Region được cấu hình để duy trì tính ổn định tĩnh, nhưng nếu xảy ra sự cố kéo dài ở Region 1, kế hoạch khắc phục thảm họa (DR playbook) của chúng tôi sẽ nêu rõ cách làm cho từng dịch vụ có thể ghi tại Region 2.\nTóm tắt Dữ liệu nằm ở trung tâm của hầu hết mọi ứng dụng. Trong bài viết này, chúng tôi đã xem xét các dịch vụ AWS cung cấp khả năng sao chép dữ liệu giữa các Region để đưa dữ liệu của bạn đến đúng nơi một cách nhanh chóng. Dù ứng dụng của bạn cần khả năng đọc cục bộ nhanh hơn, một cơ sở dữ liệu active-active, hay đơn giản chỉ là lưu trữ dữ liệu bền vững ở một Region thứ hai, chúng tôi đều có giải pháp cho bạn. Trong bài viết thứ 3 cũng là cuối cùng của loạt bài này, chúng tôi sẽ đề cập đến các tính năng quản lý và giám sát ứng dụng.\nLink bài viết gốc: (https://aws.amazon.com/blogs/architecture/creating-a-multi-region-application-with-aws-services-part-2-data-and-replication/)\nCác bài viết khác trong chuỗi này:\nXây dựng Ứng dụng Đa Vùng với Các Dịch vụ AWS – Phần 1: Tính toán, Mạng và Bảo mật\nXây dựng Ứng Dụng Đa Vùng với Các Dịch vụ AWS – Phần 3: Quản lý và Giám sát Ứng dụng",
    "description": "Xây dựng Ứng Dụng Đa Vùng với Các Dịch vụ AWS – Phần 2: Dữ Liệu và Sao Chép Tác giả: Joe Chapman và Sebastian Leks - 12/01/2022\nChủ đề: Amazon Aurora, Amazon DocumentDB, Amazon DynamoDB, Amazon ElastiCache, Amazon RDS, Amazon Redshift, Amazon Simple Storage Service (S3), Architecture, AWS Backup, AWS DataSync, AWS Global Accelerator\nDữ liệu là trung tâm của các ứng dụng có trạng thái (stateful applications). Mô hình nhất quán dữ liệu sẽ khác nhau khi lựa chọn triển khai trong một Region hay nhiều Region. Trong bài viết này, phần 2/3, chúng ta sẽ tiếp tục chọn lọc các dịch vụ AWS, tập trung vào những dịch vụ hướng dữ liệu với các tính năng gốc (native features) giúp đưa dữ liệu đến đúng nơi cần thiết để hỗ trợ chiến lược đa vùng cho ứng dụng của bạn.",
    "tags": [],
    "title": "Blog 6",
    "uri": "/en/3-translated_blogs/blog_6/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Week 7",
    "uri": "/en/1-worklog/1.7-week_7/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Translated Blogs",
    "content": "Xây dựng Ứng Dụng Đa Vùng với Các Dịch vụ AWS – Phần 3: Quản lý và Giám sát Ứng dụng Tác giả: Joe Chapman và Sebastian Leks - 28/03/2022\nChủ đề: AWS CloudFormation, AWS Config\nTrong Phần 1 của loạt bài này, chúng ta đã xây dựng nền tảng cho ứng dụng đa vùng bằng cách sử dụng các dịch vụ tính toán, mạng và bảo mật của AWS. Trong Phần 2, chúng ta đã tích hợp các dịch vụ dữ liệu và sao chép của AWS để di chuyển và đồng bộ dữ liệu giữa các vùng AWS.\nTrong Phần 3, chúng ta sẽ tìm hiểu về các dịch vụ và tính năng của AWS được sử dụng cho nhắn tin, triển khai, giám sát và quản lý.\nCông cụ dành cho nhà phát triển Tự động hóa với cơ sở hạ tầng dưới dạng mã (Infrastructure as Code – IaC) giúp loại bỏ các bước thủ công khi tạo và cấu hình hạ tầng. Nó cung cấp một mẫu có thể tái sử dụng, cho phép triển khai các môi trường nhất quán ở nhiều Vùng khác nhau.\nIaC với AWS CloudFormation StackSets sử dụng một mẫu duy nhất để tạo, cập nhật và xóa các stack trên nhiều tài khoản và Vùng chỉ trong một lần thực hiện. Khi viết một mẫu AWS CloudFormation, bạn có thể thay đổi hành vi triển khai bằng cách kết hợp các tham số với logic điều kiện. Ví dụ, bạn có thể đặt một tham số “standby” mà khi được gán giá trị “true” sẽ giới hạn số lượng Amazon Elastic Compute Cloud (Amazon EC2) instances trong một nhóm Auto Scaling của Amazon EC2 được triển khai tại một Vùng dự phòng.\nCác ứng dụng có triển khai trải rộng trên nhiều Vùng có thể sử dụng cross-Region actions trong AWS CodePipeline để xây dựng một pipeline phát hành nhất quán. Cách này giúp bạn không cần phải thiết lập các hành động khác nhau cho từng Vùng. EC2 Image Builder và Amazon Elastic Container Registry (Amazon ECR) có các tính năng sao chép liên vùng (cross-Region copy) để hỗ trợ triển khai AMI và image một cách đồng nhất, như đã đề cập ở Phần 1.\nKiến trúc hướng sự kiện Các ứng dụng hướng sự kiện và tách rời (decoupled, event-driven) tạo ra một kiến trúc có khả năng mở rộng và dễ bảo trì hơn, nhờ vào việc mỗi thành phần thực hiện nhiệm vụ cụ thể của nó một cách độc lập.\nAmazon EventBridge, một dịch vụ event bus không máy chủ (serverless), có thể gửi sự kiện giữa các tài nguyên AWS. Bằng cách tận dụng định tuyến sự kiện liên vùng (cross-Region event routing), bạn có thể chia sẻ sự kiện giữa các workloads ở các Vùng (Hình 1) và giữa các tài khoản. Ví dụ, bạn có thể chia sẻ các sự kiện về tình trạng và mức sử dụng (health and utilization) giữa các Vùng để xác định workload nào ở Vùng nào là phù hợp nhất để xử lý yêu cầu.\nHình 1. EventBridge định tuyến sự kiện từ một Vùng sang các event bus ở các Vùng khác\rNếu ứng dụng hướng sự kiện của bạn dựa trên mô hình pub/sub messaging, thì Amazon Simple Notification Service (Amazon SNS) có thể phân phối (fan out) thông điệp đến nhiều đích khác nhau. Khi các đích đến là Amazon Simple Queue Service (Amazon SQS) queues hoặc AWS Lambda functions, Amazon SNS có thể gửi thông báo đến các đối tượng nhận ở nhiều Vùng khác nhau. Ví dụ, bạn có thể gửi thông điệp đến một SQS queue trung tâm để xử lý các đơn hàng cho một ứng dụng đa vùng.\nGiám sát và khả năng quan sát (Monitoring and observability) Khả năng quan sát (observability) càng trở nên quan trọng khi số lượng tài nguyên và vị trí triển khai tăng lên. Việc có thể nhanh chóng xác định được tác động và nguyên nhân gốc rễ của một sự cố sẽ ảnh hưởng đến các hoạt động khắc phục, và đảm bảo rằng hệ thống quan sát của bạn có khả năng chống chịu với sự cố sẽ giúp bạn đưa ra những quyết định này. Khi xây dựng trên AWS, bạn có thể kết hợp tình trạng sức khỏe của các dịch vụ AWS với các chỉ số ứng dụng của bạn để có được cái nhìn toàn diện hơn về sức khỏe của cơ sở hạ tầng.\nAWS Health cung cấp bảng điều khiển (dashboards) và API hiển thị các sự kiện và hoạt động đã lên lịch có thể ảnh hưởng đến tài nguyên của bạn. Những sự kiện này bao phủ tất cả các Region, và có thể mở rộng để bao gồm toàn bộ tài khoản trong AWS Organization. EventBridge có thể giám sát các sự kiện từ AWS Health để thực hiện ngay hành động dựa trên sự kiện đó. Ví dụ, nếu nhiều dịch vụ được báo cáo là đang suy giảm, bạn có thể đặt EventBridge target tới một AWS Systems Manager automated runbook nhằm chuẩn bị ứng dụng disaster recovery (DR) cho việc chuyển đổi dự phòng (failover).\nAWS Trusted Advisor cung cấp các cảnh báo mang tính hành động nhằm tối ưu chi phí, tăng hiệu năng, cũng như cải thiện bảo mật và khả năng chịu lỗi. Trusted Advisor hiển thị kết quả trên tất cả các Region và có thể tạo báo cáo tổng hợp kết quả kiểm tra trên toàn bộ tài khoản trong một tổ chức.\nĐể duy trì khả năng quan sát đối với một ứng dụng được triển khai trên nhiều Region và nhiều tài khoản, bạn có thể tạo Trusted Advisor dashboard và operations dashboard bằng AWS Systems Manager Explorer. Operations dashboard mang đến cái nhìn hợp nhất về các tài nguyên như Amazon EC2, Amazon CloudWatch, và dữ liệu AWS Config. Bạn có thể kết hợp metadata với Amazon Athena để tạo ra một bảng kiểm kê (inventory) đa-Region và đa-tài khoản về các tài nguyên.\nBạn có thể xem các metric từ ứng dụng và tài nguyên được triển khai trên nhiều Region ngay trong CloudWatch console. Điều này giúp dễ dàng tạo biểu đồ và dashboard cho ứng dụng đa-Region. CloudWatch cũng hỗ trợ cross-account, cho phép bạn tạo một cái nhìn tập trung về dashboards, alarms, và metrics trên toàn bộ tổ chức của mình.\nAmazon OpenSearch Service tập hợp các log file không cấu trúc hoặc bán cấu trúc, message, metric, document, dữ liệu cấu hình, và nhiều loại dữ liệu khác. Cross-cluster replication (nhân bản chéo cụm) sẽ sao chép indices, mappings, và metadata trong mô hình active-passive từ một domain OpenSearch sang một domain khác. Điều này giúp giảm độ trễ giữa các Region và đảm bảo tính sẵn sàng cao cho dữ liệu.\nAWS Resilience Hub đánh giá và theo dõi khả năng chịu lỗi (resiliency) của ứng dụng. Nó kiểm tra mức độ ứng dụng có thể duy trì tính khả dụng khi thực hiện failover ở cấp độ Region. Ví dụ, nó có thể kiểm tra xem ứng dụng đã cấu hình cross-Region replication trên các bucket Amazon S3 chưa, hoặc các instance Amazon RDS đã có read-replica cross-Region hay chưa. Hình 2 minh họa kết quả đánh giá từ Resilience Hub. Nó cũng gợi ý việc sử dụng Route 53 Application Recovery Controller (được đề cập trong Phần 1) để đảm bảo Auto Scaling group của Amazon EC2 trong một Region được scale sẵn và sẵn sàng nhận traffic trước khi chuyển failover sang đó.\nHình 2. Các khuyến nghị của Resilience Hub\rQuản lý: Quản trị (Governance) Việc mở rộng một ứng dụng sang một quốc gia mới đồng nghĩa với việc có thể sẽ có thêm những luật và quy định về quyền riêng tư dữ liệu cần tuân thủ. Những điều này sẽ khác nhau tùy theo từng quốc gia, và chúng tôi khuyến nghị bạn nên tham khảo với nhóm pháp lý của mình để hiểu đầy đủ cách chúng ảnh hưởng đến ứng dụng của bạn.\nAWS Control Tower hỗ trợ tuân thủ dữ liệu bằng cách cung cấp các guardrails nhằm kiểm soát và đáp ứng các yêu cầu về lưu trú dữ liệu. Các guardrails này là tập hợp của Service Control Policies (SCPs) và các quy tắc AWS Config. Bạn có thể triển khai chúng độc lập với AWS Control Tower nếu cần. Các dịch vụ đa vùng (multi-Region) tập trung vào bảo mật bổ sung đã được đề cập trong Phần 1.\nAWS Config cung cấp một cái nhìn chi tiết về cấu hình và lịch sử của các tài nguyên AWS. Một AWS Config aggregator thu thập dữ liệu cấu hình và tuân thủ từ nhiều tài khoản và nhiều Vùng (Region) về một tài khoản trung tâm. Cái nhìn tập trung này mang lại một cái nhìn toàn diện về sự tuân thủ và các hành động trên tài nguyên, bất kể chúng nằm ở tài khoản hay Vùng nào.\nQuản lý: Vận hành (Operations) Một số khả năng của AWS Systems Manager cho phép quản trị tài nguyên AWS dễ dàng hơn, đặc biệt khi ứng dụng phát triển. Systems Manager Automation đơn giản hóa các tác vụ bảo trì và triển khai phổ biến cho tài nguyên AWS thông qua các runbook tự động. Những runbook này tự động hóa các hành động trên tài nguyên trải rộng nhiều Vùng và nhiều tài khoản.\nBạn có thể kết hợp Systems Manager Automation với Systems Manager Patch Manager để đảm bảo các phiên bản (instances) luôn duy trì bản vá mới nhất trên nhiều tài khoản và nhiều Vùng. Hình 3 cho thấy Systems Manager đang chạy nhiều tài liệu tự động (automation documents) trên một kiến trúc đa vùng.\nHình 3. Sử dụng Systems Manager Automation từ một tài khoản vận hành trung tâm của AWS để tự động hóa các hành động trên nhiều Vùng (Region).\rKết hợp lại Ở cuối mỗi phần của loạt blog này, chúng tôi xây dựng một ứng dụng mẫu dựa trên các dịch vụ đã đề cập. Điều này cho bạn thấy cách kết hợp các dịch vụ để tạo ra một ứng dụng đa vùng (multi-Region) với AWS. Chúng tôi không sử dụng tất cả các dịch vụ đã nhắc đến, mà chỉ chọn những dịch vụ phù hợp với trường hợp sử dụng.\nChúng tôi xây dựng ví dụ này để mở rộng đến một đối tượng toàn cầu. Ứng dụng này yêu cầu tính khả dụng cao trên nhiều vùng và ưu tiên hiệu năng hơn là tính nhất quán nghiêm ngặt. Chúng tôi đã chọn các dịch vụ sau (được đề cập trong bài viết này) để đạt được mục tiêu, đồng thời xây dựng dựa trên nền tảng từ phần 1 và phần 2:\nCloudFormation StackSets để triển khai toàn bộ bằng IaC. Điều này đảm bảo hạ tầng được triển khai nhất quán trên các vùng.\nAWS Config rules cung cấp một nơi tập trung để giám sát, ghi nhận và đánh giá cấu hình tài nguyên của chúng tôi.\nĐể tăng khả năng quan sát (observability), chúng tôi đã tạo dashboard với CloudWatch dashboard, Personal Health dashboard, và Trusted Advisor dashboard.\nHình 4. Xây dựng một ứng dụng với các dịch vụ đa vùng (multi-Region).\rMặc dù mục tiêu chính của chúng tôi là mở rộng đến một đối tượng người dùng toàn cầu, chúng tôi lưu ý rằng một số dịch vụ như CloudFormation StackSets phụ thuộc vào Vùng 1. Mỗi triển khai theo vùng được thiết lập để có tính ổn định tĩnh, nhưng nếu xảy ra sự cố ngừng hoạt động kéo dài ở Vùng 1, kế hoạch khắc phục thảm họa (DR playbook) của chúng tôi sẽ nêu rõ cách thực hiện các thay đổi CloudFormation tại Vùng 2.\nTóm tắt Nhiều dịch vụ AWS có các tính năng hỗ trợ bạn xây dựng và quản lý kiến trúc đa vùng (multi-Region), nhưng việc xác định những khả năng này trong hơn 200 dịch vụ có thể gây choáng ngợp.\nTrong loạt blog 3 phần này, chúng tôi đã khám phá các dịch vụ AWS với những tính năng giúp bạn xây dựng ứng dụng đa vùng:\nỞ Phần 1, chúng tôi xây dựng nền tảng với các dịch vụ về bảo mật, mạng và điện toán của AWS.\nỞ Phần 2, chúng tôi bổ sung chiến lược dữ liệu và sao chép.\nCuối cùng, ở Phần 3, chúng tôi xem xét các lớp ứng dụng và quản lý.\nLink bài viết gốc: (https://aws.amazon.com/blogs/architecture/creating-a-multi-region-application-with-aws-services-part-3-application-management-and-monitoring/)\nCác bài viết khác trong chuỗi này:\nXây dựng Ứng dụng Đa Vùng với Các Dịch vụ AWS – Phần 1: Tính toán, Mạng và Bảo mật\nXây dựng Ứng Dụng Đa Vùng với Các Dịch vụ AWS – Phần 2: Dữ Liệu và Sao Chép",
    "description": "Xây dựng Ứng Dụng Đa Vùng với Các Dịch vụ AWS – Phần 3: Quản lý và Giám sát Ứng dụng Tác giả: Joe Chapman và Sebastian Leks - 28/03/2022\nChủ đề: AWS CloudFormation, AWS Config\nTrong Phần 1 của loạt bài này, chúng ta đã xây dựng nền tảng cho ứng dụng đa vùng bằng cách sử dụng các dịch vụ tính toán, mạng và bảo mật của AWS. Trong Phần 2, chúng ta đã tích hợp các dịch vụ dữ liệu và sao chép của AWS để di chuyển và đồng bộ dữ liệu giữa các vùng AWS.",
    "tags": [],
    "title": "Blog 7",
    "uri": "/en/3-translated_blogs/blog_7/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Week 8",
    "uri": "/en/1-worklog/1.8-week_8/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Week 9",
    "uri": "/en/1-worklog/1.9-week_9/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Week 10",
    "uri": "/en/1-worklog/1.10-week_10/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Week 11",
    "uri": "/en/1-worklog/1.11-week_11/index.html"
  },
  {
    "breadcrumb": "Internship Report \u003e Worklog",
    "content": "Chapter X Some Chapter title Lorem Ipsum.",
    "description": "Chapter X Some Chapter title Lorem Ipsum.",
    "tags": [],
    "title": "Week 12",
    "uri": "/en/1-worklog/1.12-week_12/index.html"
  },
  {
    "breadcrumb": "Internship Report",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/en/categories/index.html"
  },
  {
    "breadcrumb": "Internship Report",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/en/tags/index.html"
  }
]
